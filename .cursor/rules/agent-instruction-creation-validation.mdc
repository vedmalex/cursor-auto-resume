---
description: Provides mandatory guidelines for creating, structuring, and validating agent instruction files within the Memory Bank system to ensure clarity, consistency, and effective AI behavior.
globs: ["custom_modes/**/*.md", "**/*.mdc"]
alwaysApply: false
---
# Agent Instruction Creation and Validation Guide

> **TL;DR:** This rule defines the mandatory structure and content requirements for all agent instruction files (modes) within the Memory Bank system, ensuring they are clear, consistent, and effective for AI execution.

## ‚ö†Ô∏è MANDATORY RULE: FETCH ALL RELEVANT RULES FIRST ‚ö†Ô∏è

**CRITICAL REQUIREMENT**: Any agent instruction file (mode) MUST explicitly reference all necessary rules and files (including templates and other critical artifacts) using the `@<filename>` syntax at the very beginning of its "IMPLEMENTATION STEPS" section. This ensures the agent always operates with the full, current context and relevant meta-rules, allowing for a flexible and standardized approach to resource integration.

The agent instruction file MUST ensure that all necessary rules and files (including templates and other critical artifacts) are loaded at the very beginning of its "IMPLEMENTATION STEPS" section. This is achieved by explicitly referencing these resources using the new `@<filename>` syntax, which allows for a flexible and standardized approach to resource integration and ensures the agent operates with the full, current context.

For example:
```markdown
// The agent will load critical rules using the @<filename> syntax.
// This includes: @isolation_rules/Core/main-optimized and @agent-instruction-creation-validation.
// Additional specific rules will be loaded as needed for the mode.
```

## 1. MANDATORY STRUCTURE OF AN AGENT INSTRUCTION FILE

All agent instruction files (e.g., `custom_modes/*.md`) MUST adhere to the following strict hierarchical structure to ensure clarity, consistency, and optimal AI interpretation.

```mermaid
graph TD
    File["Agent Instruction File"] --> Frontmatter["Front-Matter<br>(description, alwaysApply, globs)"]
    File --> Role["Role Description<br>(Imperative Tone)"]
    File --> FetchRulesWarning["‚ö†Ô∏è MANDATORY RULE: FETCH ALL RELEVANT RULES FIRST ‚ö†Ô∏è"]
    File --> Tldr["TL;DR<br>(Concise Summary)"]
    File --> MermaidDiagrams["Mermaid Workflow Diagrams"]
    File --> ImplementationSteps["Implementation Implementation Steps<br>(Detailed plan with rule loading)"]
    ImplementationSteps --> OptimizeLoadingAndAliases["‚ú® Optimize Rule Loading & Alias"]
    OptimizeLoadingAndAliases --> DefineSuccessCriteria["üéØ Define Success Criteria<br>(For each step)"]
    DefineSuccessCriteria --> ValidateRulePaths["Validate Rule Paths<br>(Existence, Correction, Removal)"]
    ValidateRulePaths --> VerificationCommitment["Verification Commitment<br>(Agent's promise to verify)"]
    File --> VerificationChecklists["Verification Checklists<br>(Detailed criteria for completion)"]
    File --> ModeTransitions["Mode Transition Guidance"]
    File --> ValidationOptions["Validation Options"]
    File --> WebSearchIntegration["Web Search Integration (if applicable)"]
    File --> ContextManagement["Context Management (if applicable)"]
    File --> GitIntegration["Git Workflow Integration (if applicable)"]
    File --> MandatoryArtifacts["Mandatory Artifact Creation (if applicable)"]
    File --> CommandExecutionPrinciples["Command Execution Principles (if applicable)"]
    File --> PlanningApproach["Planning/Build/Creative Approach (detailed by level)"]

    style Frontmatter fill:#f0e0d0,stroke:#c0a080,color:black
    style Role fill:#c0d0e0,stroke:#90a0b0,color:black
    style Tldr fill:#e0c0f0,stroke:#b090c0,color:black
    style MermaidDiagrams fill:#d0f0e0,stroke:#a0c0b0,color:black
    style ImplementationSteps fill:#f0d0c0,stroke:#c0a090,color:black
    style OptimizeLoadingAndAliases fill:#99ccff,stroke:#336699,color:black
    style DefineSuccessCriteria fill:#ffcc99,stroke:#ff9900,color:white
    style ValidateRulePaths fill:#a0c0f0,stroke:#7090c0,color:black
    style VerificationCommitment fill:#c0f0f0,stroke:#90c0c0,color:black
    style VerificationChecklists fill:#e0f0c0,stroke:#b0c090,color:black
    style FetchRulesWarning fill:#ffaaaa,stroke:#cc0000,color:black
```

## 2. SECTION GUIDELINES AND CONTENT REQUIREMENTS

Each section MUST be present and adhere to the following guidelines:

### 2.1. Front-Matter

*   **Purpose**: Provides essential metadata for the rule.
*   **Content**: MUST contain `description`, `alwaysApply` (boolean), and optionally `globs` (array of strings).
*   **Validation**:
    *   `description`: MANDATORY, non-empty, clear, concise, and in English. States *when* and *under what conditions* the rule should be applied.
    *   `alwaysApply`: MANDATORY, boolean (true/false).
    *   `globs`: OPTIONAL, but highly recommended for context-specific rules.

### 2.2. Role Description (Mandatory Imperative Tone)

*   **Purpose**: Clearly defines the agent's role and primary objective within this mode.
*   **Content**: Start with "Your role is to..." and use strong, directive language. It defines *what* the agent **MUST** do.
*   **Validation**: The role MUST be clearly stated, singular, and actionable. It MUST use imperative verbs.

### 2.3. TL;DR

*   **Purpose**: Provides a concise, one-to-two sentence summary of the rule's core functionality.
*   **Content**: A brief overview, typically enclosed in a blockquote (`> **TL;DR:** ...`).
*   **Validation**: MUST be concise and accurately summarize the rule's main purpose.

### 2.4. Mermaid Workflow Diagrams

*   **Purpose**: Visualizes the agent's internal workflow and decision-making process within the mode.
*   **Content**: At least one Mermaid diagram illustrating the main flow. Use clear nodes and transitions.
*   **Validation**: Diagrams MUST be syntactically correct Mermaid DSL and accurately represent the described workflow.

### 2.5. Implementation Steps (with Rule Loading)

*   **Purpose**: Details the sequence of actions the agent will take to execute the mode's workflow, including the explicit loading of necessary rules.
*   **Content**: Each step MUST outline specific actions and REQUIRED references to relevant rules and files using the `@<filename>` syntax. This ensures the agent loads all necessary context and sub-rules.
*   **Validation**:
    *   Steps MUST be clearly defined and actionable.
    *   Each step where external rules or files are needed MUST include references using the `@<filename>` syntax.
    *   Ensure all `@<filename>` references are correct and refer to existing rules or files.
    *   The agent will automatically handle path resolution and file lookup based on the `@<filename>` syntax (as described in the `Mode Composer Mode` documentation).
    *   **Success Criteria Requirements**: Each step MUST have clearly defined and verifiable success criteria that are measurable, unambiguous, complete, and include validation methods.
    *   **Insufficient Criteria Handling**: When success criteria are not sufficiently precise, the agent MUST ask clarifying questions and propose additional details to make them unambiguous.

#### Path Resolution and File Lookup

This section confirms that when rules or files are referenced using the `@<filename>` syntax, the agent automatically handles their resolution and lookup. This internal process negates the need for explicit manual path validation or correction utilities within the agent's instructions, ensuring seamless access to all necessary resources.

### 2.5.1. SUCCESS CRITERIA DEFINITION AND VALIDATION

> **TL;DR:** This section defines the mandatory requirements for success criteria in agent instruction files to ensure clear, measurable, and verifiable completion standards for each workflow step.

**CRITICAL REQUIREMENT**: Every step in agent instruction workflows MUST have explicitly defined success criteria that are measurable, unambiguous, and verifiable.

#### Success Criteria Requirements:
1. **Measurable Outcomes**: Each step must have quantifiable or clearly verifiable completion criteria with specific indicators
2. **Clarity and Precision**: Criteria must be unambiguous and leave no room for interpretation
3. **Completeness Coverage**: All aspects of step completion must be addressed in the success criteria
4. **Validation Methods**: Clear methods for verifying criteria fulfillment must be specified
5. **Insufficient Criteria Handling**: When success criteria are not sufficiently precise, the agent MUST ask clarifying questions and propose additional details

#### Examples of Precise Success Criteria:
- **For "Load Validation Rules"**: Success = All required validation rules loaded and accessible, with confirmation of rule availability and version compatibility
- **For "Generate Mermaid Diagram"**: Success = Syntactically correct Mermaid DSL generated, diagram renders without errors, and accurately represents the described workflow
- **For "Validate Front-Matter"**: Success = All mandatory fields present and validated, YAML syntax confirmed correct, and field content meets quality standards

#### Process for Handling Insufficient Criteria:
```mermaid
graph TD
    ReviewCriteria["üîç Review Success Criteria"] --> CheckPrecision{"Criteria Precise?"}
    CheckPrecision -->|"Yes"| ProceedStep["‚úÖ Proceed with Step"]
    CheckPrecision -->|"No"| AskQuestions["‚ùì Ask Clarifying Questions"]
    AskQuestions --> ProposeDetails["üí° Propose Additional Details"]
    ProposeDetails --> ConfirmCriteria["‚úÖ Confirm Criteria Acceptance"]
    ConfirmCriteria --> DocumentCriteria["üìù Document Agreed Criteria"]
    DocumentCriteria --> ProceedStep

    style ReviewCriteria fill:#99ccff,stroke:#336699,color:white
    style CheckPrecision fill:#ffa64d,stroke:#cc7a30,color:white
    style AskQuestions fill:#ff9999,stroke:#cc6666,color:white
    style ProposeDetails fill:#ffcc99,stroke:#ff9900,color:white
    style ConfirmCriteria fill:#99ff99,stroke:#66cc66,color:white
    style DocumentCriteria fill:#ccccff,stroke:#9999cc,color:white
    style ProceedStep fill:#4dbb5f,stroke:#36873f,color:white
```

### 2.6. RULE LOADING OPTIMIZATION AND ALIASING

> **TL;DR:** This section defines how rules and files are loaded and referenced to prevent duplicate loading and optimize token usage through aliasing.

To prevent redundant loading of rules and files and to optimize token usage, the system enforces a strict loading and aliasing mechanism.

### Principles:
1.  **Single Load**: Each rule or file must be loaded into the agent's context only once, regardless of how many times it's referenced.
2.  **Aliasing for Frequent Use**: If a rule/file is referenced multiple times within a single task or across different phases of a complex task, it should be moved "upwards" in the rule hierarchy and assigned a unique alias.
3.  **Alias Naming Convention**: Aliases MUST be named using **uppercase letters only** and MUST NOT contain any special characters. They MUST be guaranteed unique within the entire rule file.
4.  **Reference by Alias**: Once an alias is defined, all subsequent mentions of the original rule/file MUST use its alias.

### Workflow for Rule Loading and Aliasing:
```mermaid
graph TD
    Start["üîÑ Rule Loading & Alias Check"] --> IdentifyReferences["üîç Identify All Rule/File References"]
    IdentifyReferences --> ScanContext["üìã Scan Current Context for Loaded Files"]
    ScanContext --> CheckDuplicate{"Duplicate Reference?"}

    CheckDuplicate -->|"Yes"| AlreadyLoaded["‚úÖ Already Loaded: Skip Reload"]
    AlreadyLoaded --> CheckFrequency{"Frequent Use?"}

    CheckDuplicate -->|"No"| LoadFile["‚¨áÔ∏è Load Rule/File into Context"]
    LoadFile --> CheckFrequency

    CheckFrequency -->|"Yes"| CreateAlias{"Generate Unique Alias?"}
    CreateAlias -->|"Yes"| DefineAlias["‚¨ÜÔ∏è Define Alias (UPPERCASE)"]
    DefineAlias --> UpdateReferences["üìù Update References to Use Alias"]
    UpdateReferences --> FinalizeCheck["üèÅ Finalize Check"]

    CheckFrequency -->|"No"| FinalizeCheck
    FinalizeCheck --> End["‚úÖ Loading & Aliasing Complete"]

    style Start fill:#99ccff,stroke:#336699,color:black
    style LoadFile fill:#4dbb5f,stroke:#36873f,color:black
    style DefineAlias fill:#ffa64d,stroke:#cc7a30,color:black
    style UpdateReferences fill:#d94dbb,stroke:#a3378a,color:white
    style End fill:#4da6ff,stroke:#0066cc,color:white
```

### 2.6. Verification Commitment

*   **Purpose**: A explicit statement of the agent's commitment to verification and adherence to core principles.
*   **Content**: MUST be formatted as a code block (e.g., ```` ``` ````) containing a clear, bulleted list of "I WILL" statements, similar to the provided example.
*   **Validation**: MUST contain commitments related to following maps, running checkpoints, and maintaining `tasks.md` as the source of truth. Additionally, commitments MUST be comprehensive and include all steps and actions mentioned within the instruction file for the specific mode.

### 2.7. Complexity Level Determination (The idea from "5th block")

*   **Purpose**: To ensure agent instructions adapt their behavior based on the complexity level of the task, as defined in `tasks.md`.
*   **Content**: This concept should be integrated into sections like "Planning Approach," "Build Approach," or "Creative Phase Approach," detailing how the agent's actions differ for Level 1, Level 2, Level 3, and Level 4 tasks.
*   **Validation**: The instruction file MUST explicitly reference the "Complexity Level" from `tasks.md` and define differentiated behaviors based on this level.

### 2.8. Other Common Sections (If Applicable)

*   **Verification Checklists**: Detailed criteria for specific phases or tasks.
*   **Mode Transition Guidance**: Explicitly defines entry and exit points for the mode.
*   **Validation Options**: Summarizes ways to verify the mode's output.
*   **Web Search Integration**: Guidelines for using `@web` command, documenting findings.
*   **Context Management**: Instructions for updating `current-context.md` by leveraging the `@context-template` for consistent structure and dynamic population, or guidelines for managing task-specific contexts.
*   **Git Workflow Integration**: Guidance on using the `Git Workflow Controller` for commits, branching, etc.
*   **Mandatory Artifact Creation**: Lists specific files that MUST be created or updated.
*   **Command Execution Principles**: Guidelines for executing terminal commands.
*   **Planning/Build/Creative Approach**: Detailed sub-sections on how to perform the core function of the mode, often broken down by complexity level.

### 2.9. Help Command Integration

*   **Purpose**: To provide on-demand guidance and context to the user regarding the agent's current mode, available commands, and workflow.
*   **Content**: The agent's instructions MUST include a mechanism (e.g., a dedicated `HELP` command or a designated section) to display the following:
    *   Relevant Mermaid workflow diagrams for the current mode.
    *   Key rules and principles governing the agent's behavior in this mode.
    *   A list of available stages or commands for the user.
    *   General tips or best practices for interacting with the agent in this mode.
*   **Validation**: The `HELP` command (or equivalent mechanism) MUST be present, accessible, and provide accurate, concise, and up-to-date information as specified.

## 3. VALIDATION CRITERIA FOR AGENT INSTRUCTION FILES

Before any agent instruction file is considered valid and ready for use, it MUST pass the following validation checks:

*   **Completeness**: All MANDATORY sections (Front-Matter, Role, TL;DR, Mermaid Diagrams, Implementation Steps, Verification Commitment) MUST be present.
*   **Clarity**: The language throughout the file MUST be clear, concise, and unambiguous. Jargon should be explained if used.
*   **Actionability**: Instructions MUST be actionable for the AI, providing clear directives (MUST, SHOULD, etc.).
*   **Rule Loading**: All `Implementation Steps` MUST explicitly include references using the `@<filename>` syntax for necessary sub-rules and contexts.
*   **Success Criteria**: All workflow steps MUST have clearly defined, measurable, and verifiable success criteria with proper validation methods.
*   **File and Rule Reference Validation**: All `@<filename>` references MUST be correct and refer to existing rules or files. Any use of `fetch_rule` or `read_file` syntax is considered invalid and requires transformation.
    *   For `.mdc` rule files, the path in `@<filename>` MUST be relative to `_cursor/rules/` and MUST NOT contain `_cursor/rules/`.
    *   For non-`.mdc` files, the path in `@<filename>` MAY be relative to the project root.
    *   **Alias Validation**:
        - All defined aliases MUST be unique within the agent instruction file.
        - Aliases MUST consist only of uppercase letters (A-Z) and numbers (0-9). No special characters are allowed.
        - If a rule/file is referenced by an alias, that alias MUST be explicitly defined within the current agent instruction file or within a higher-level loaded rule.
    - **Duplicate Loading Prevention**: The system MUST verify that a rule/file is not loaded multiple times into the agent's context. If a rule/file is referenced multiple times, subsequent references MUST use its defined alias if one exists.
    *   **MANDATORY**: The existence of the file or rule referenced by `@<filename>` or its alias (or resulting from `fetch_rule`/`read_file` transformation) MUST be verified using the agent's internal file system tools (e.g., `file_search`, `read_file` with error handling for non-existence).
*   **Mermaid Syntax**: All Mermaid diagrams MUST be syntactically correct and render properly.
*   **Context Consistency**: If `current-context.md` is managed, it MUST leverage the `@context-template` for consistent structure and dynamic population.
*   **`tasks.md` Dependency**: The instruction file MUST correctly reference and interact with `tasks.md` for task tracking and complexity determination.
*   **Date Format Compliance**: All date references within the instruction file (e.g., in templates or examples) MUST adhere to the `YYYY-MM-DD` format.
*   **Unique Naming**: The instruction file's name MUST be unique and follow the `kebab-case` convention.
*   **Help Command Presence**: The agent's instructions MUST include a functional `HELP` command (or equivalent mechanism) as defined in `2.9. Help Command Integration`.

## ‚úÖ VERIFICATION COMMITMENT

I WILL ensure all new and modified agent instruction files adhere to the defined structure and content requirements in this guide.
I WILL perform all validation checks specified in this document before approving any agent instruction file for use within the Memory Bank system.
I WILL prioritize clarity and actionability in all generated or modified instructions to ensure optimal AI interpretation and execution.
I WILL ensure that all agent instruction files contain proper YAML Front-Matter with required fields.
I WILL ensure that all TL;DR sections are concise, clear, and accurately summarize the rule's main purpose.
I WILL ensure that all sections are written in English and follow the mandatory structure guidelines.
I WILL ensure that every step in agent instruction workflows has clearly defined, measurable, and verifiable success criteria.
I WILL ask clarifying questions and propose additional details when success criteria are not sufficiently precise or complete.
I WILL validate that success criteria include proper validation methods and cover all aspects of step completion.

```