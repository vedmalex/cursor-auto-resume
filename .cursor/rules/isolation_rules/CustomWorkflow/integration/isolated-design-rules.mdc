---
description: "Apply this rule when designing Memory Bank systems to implement isolated design principles for maintainable architecture. Ensures modular design and system maintainability."
globs: "**/integration/**", "**/design/**", "**/architecture/**"
alwaysApply: false
---

# ISOLATED DESIGN PRINCIPLES

> **TL;DR:** Comprehensive isolated design methodology for Memory Bank components, ensuring maintainable, testable, and scalable system architecture through clear separation of concerns and minimal coupling.

## üèóÔ∏è ISOLATED DESIGN OVERVIEW

Isolated design principles ensure Memory Bank components are self-contained, loosely coupled, and highly cohesive, enabling independent development, testing, and maintenance.

### Core Isolation Principles

**Separation of Concerns**
- Each component has a single, well-defined responsibility
- Clear boundaries between different system layers
- Minimal overlap in functionality
- Independent evolution paths

**Loose Coupling**
- Components interact through well-defined interfaces
- Minimal dependencies between modules
- Configuration-driven integration
- Event-driven communication where appropriate

**High Cohesion**
- Related functionality grouped together
- Strong internal relationships within components
- Clear component boundaries
- Focused component purposes

## üîß COMPONENT ISOLATION STRATEGIES

### 1. Mode Isolation

**Independent Mode Design**
```typescript
// Each mode is completely self-contained
interface MemoryBankMode {
  name: string;
  initialize(): Promise<void>;
  execute(): Promise<ModeResult>;
  cleanup(): Promise<void>;
  getRequiredDependencies(): string[];
  getProvidedServices(): string[];
}

class VANMode implements MemoryBankMode {
  name = 'VAN';

  // Self-contained initialization
  async initialize(): Promise<void> {
    await this.loadConfiguration();
    await this.validateSystemRequirements();
    await this.setupWorkingDirectory();
  }

  // Independent execution
  async execute(): Promise<ModeResult> {
    const analysis = await this.analyzeRequirements();
    const complexity = await this.determineComplexity();
    const plan = await this.createInitialPlan();

    return {
      analysis,
      complexity,
      plan,
      nextMode: this.determineNextMode(complexity)
    };
  }

  // Clean separation of dependencies
  getRequiredDependencies(): string[] {
    return ['file-system', 'configuration', 'task-parser'];
  }

  getProvidedServices(): string[] {
    return ['requirement-analysis', 'complexity-assessment', 'initial-planning'];
  }
}
```

**Mode Communication Interface**
```typescript
// Standardized communication between modes
interface ModeTransition {
  fromMode: string;
  toMode: string;
  context: ModeContext;
  validation: TransitionValidation;
}

interface ModeContext {
  tasks: Task[];
  configuration: SystemConfiguration;
  workingDirectory: string;
  metadata: Record<string, any>;
}

class ModeTransitionManager {
  async transitionBetweenModes(
    from: MemoryBankMode,
    to: MemoryBankMode,
    context: ModeContext
  ): Promise<TransitionResult> {
    // Validate transition is allowed
    await this.validateTransition(from, to);

    // Clean up source mode
    await from.cleanup();

    // Transfer context
    const transferredContext = await this.transferContext(context, from, to);

    // Initialize target mode
    await to.initialize();

    return {
      success: true,
      context: transferredContext,
      timestamp: new Date()
    };
  }
}
```

### 2. Service Isolation

**Service Layer Design**
```typescript
// Each service is independently testable and deployable
abstract class IsolatedService {
  abstract name: string;
  abstract version: string;

  abstract initialize(config: ServiceConfig): Promise<void>;
  abstract healthCheck(): Promise<HealthStatus>;
  abstract shutdown(): Promise<void>;
}

class FileSystemService extends IsolatedService {
  name = 'file-system';
  version = '1.0.0';

  private config: FileSystemConfig;

  async initialize(config: FileSystemConfig): Promise<void> {
    this.config = config;
    await this.validatePermissions();
    await this.createRequiredDirectories();
  }

  async readFile(path: string): Promise<string> {
    // Isolated file reading with error handling
    try {
      return await fs.readFile(path, 'utf-8');
    } catch (error) {
      throw new FileSystemError(`Failed to read file: ${path}`, error);
    }
  }

  async writeFile(path: string, content: string): Promise<void> {
    // Isolated file writing with validation
    await this.validateWritePermissions(path);
    await this.createDirectoryIfNeeded(path);
    await fs.writeFile(path, content, 'utf-8');
  }

  async healthCheck(): Promise<HealthStatus> {
    return {
      service: this.name,
      status: 'healthy',
      checks: {
        permissions: await this.checkPermissions(),
        diskSpace: await this.checkDiskSpace(),
        accessibility: await this.checkAccessibility()
      }
    };
  }
}
```

**Configuration Service Isolation**
```typescript
class ConfigurationService extends IsolatedService {
  name = 'configuration';
  version = '1.0.0';

  private configCache: Map<string, any> = new Map();

  async loadConfiguration(path: string): Promise<Configuration> {
    // Isolated configuration loading
    if (this.configCache.has(path)) {
      return this.configCache.get(path);
    }

    const config = await this.parseConfigurationFile(path);
    await this.validateConfiguration(config);

    this.configCache.set(path, config);
    return config;
  }

  async updateConfiguration(
    path: string,
    updates: Partial<Configuration>
  ): Promise<void> {
    // Isolated configuration updates
    const current = await this.loadConfiguration(path);
    const updated = { ...current, ...updates };

    await this.validateConfiguration(updated);
    await this.writeConfigurationFile(path, updated);

    // Update cache
    this.configCache.set(path, updated);
  }
}
```

### 3. Data Isolation

**Task Data Isolation**
```typescript
// Task data is completely isolated from other concerns
class TaskDataManager {
  private taskStore: Map<string, Task> = new Map();
  private persistenceLayer: TaskPersistence;

  constructor(persistenceLayer: TaskPersistence) {
    this.persistenceLayer = persistenceLayer;
  }

  async addTask(task: Task): Promise<void> {
    // Validate task in isolation
    await this.validateTask(task);

    // Store in memory
    this.taskStore.set(task.id, task);

    // Persist independently
    await this.persistenceLayer.saveTask(task);
  }

  async getTask(id: string): Promise<Task | null> {
    // Check memory first
    if (this.taskStore.has(id)) {
      return this.taskStore.get(id)!;
    }

    // Load from persistence
    const task = await this.persistenceLayer.loadTask(id);
    if (task) {
      this.taskStore.set(id, task);
    }

    return task;
  }

  async updateTask(id: string, updates: Partial<Task>): Promise<void> {
    const task = await this.getTask(id);
    if (!task) {
      throw new TaskNotFoundError(id);
    }

    const updatedTask = { ...task, ...updates };
    await this.validateTask(updatedTask);

    this.taskStore.set(id, updatedTask);
    await this.persistenceLayer.saveTask(updatedTask);
  }
}

// Persistence layer is isolated from business logic
interface TaskPersistence {
  saveTask(task: Task): Promise<void>;
  loadTask(id: string): Promise<Task | null>;
  loadAllTasks(): Promise<Task[]>;
  deleteTask(id: string): Promise<void>;
}

class FileSystemTaskPersistence implements TaskPersistence {
  constructor(private basePath: string) {}

  async saveTask(task: Task): Promise<void> {
    const filePath = path.join(this.basePath, `${task.id}.json`);
    await fs.writeFile(filePath, JSON.stringify(task, null, 2));
  }

  async loadTask(id: string): Promise<Task | null> {
    const filePath = path.join(this.basePath, `${id}.json`);
    try {
      const content = await fs.readFile(filePath, 'utf-8');
      return JSON.parse(content);
    } catch (error) {
      return null;
    }
  }
}
```

## üß™ TESTING ISOLATION

### Unit Testing Isolation

**Isolated Component Testing**
```typescript
describe('VANMode - Isolated Testing', () => {
  let vanMode: VANMode;
  let mockFileSystem: jest.Mocked<FileSystemService>;
  let mockConfig: jest.Mocked<ConfigurationService>;

  beforeEach(() => {
    // Create isolated test environment
    mockFileSystem = createMockFileSystem();
    mockConfig = createMockConfiguration();

    vanMode = new VANMode(mockFileSystem, mockConfig);
  });

  test('should analyze requirements independently', async () => {
    // Setup isolated test data
    const testRequirements = {
      description: 'Test requirement',
      complexity: 'medium',
      timeline: '1 week'
    };

    mockFileSystem.readFile.mockResolvedValue(JSON.stringify(testRequirements));

    // Test in isolation
    const result = await vanMode.analyzeRequirements();

    // Verify isolated behavior
    expect(result.complexity).toBe('Level 2');
    expect(mockFileSystem.readFile).toHaveBeenCalledWith('requirements.json');
    expect(mockConfig.loadConfiguration).not.toHaveBeenCalled();
  });

  test('should handle errors in isolation', async () => {
    // Test error isolation
    mockFileSystem.readFile.mockRejectedValue(new Error('File not found'));

    // Verify error doesn't propagate beyond component
    await expect(vanMode.analyzeRequirements()).rejects.toThrow('File not found');

    // Verify component remains stable
    expect(vanMode.isHealthy()).toBe(true);
  });
});
```

**Integration Testing with Isolation**
```typescript
describe('Mode Transition - Integration Testing', () => {
  let transitionManager: ModeTransitionManager;
  let vanMode: VANMode;
  let planMode: PLANMode;

  beforeEach(async () => {
    // Create isolated integration test environment
    const testContainer = await createIsolatedTestContainer();

    vanMode = testContainer.get<VANMode>('VAN');
    planMode = testContainer.get<PLANMode>('PLAN');
    transitionManager = testContainer.get<ModeTransitionManager>('TransitionManager');
  });

  test('should transition between modes while maintaining isolation', async () => {
    // Initialize VAN mode in isolation
    await vanMode.initialize();
    const vanResult = await vanMode.execute();

    // Test transition maintains isolation
    const transitionResult = await transitionManager.transitionBetweenModes(
      vanMode,
      planMode,
      vanResult.context
    );

    // Verify isolation is maintained
    expect(transitionResult.success).toBe(true);
    expect(vanMode.isCleanedUp()).toBe(true);
    expect(planMode.isInitialized()).toBe(true);
  });
});
```

## üìä ISOLATION METRICS

### Design Quality Metrics

**Coupling Metrics**
- Afferent coupling (Ca): Number of classes that depend on this class
- Efferent coupling (Ce): Number of classes this class depends on
- Instability (I): Ce / (Ca + Ce)
- Target: I < 0.5 for stable components

**Cohesion Metrics**
- Lack of Cohesion of Methods (LCOM): Measure of method relationships
- Target: LCOM < 0.3 for high cohesion
- Functional cohesion: All methods work toward single goal

**Isolation Quality Indicators**
```typescript
interface IsolationMetrics {
  componentCoupling: number;        // Target: < 5 dependencies
  interfaceStability: number;       // Target: > 0.8
  testIsolation: number;           // Target: 100% isolated tests
  errorContainment: number;        // Target: 100% error isolation
  configurationIsolation: number; // Target: 100% config isolation
}

class IsolationAnalyzer {
  analyzeComponent(component: any): IsolationMetrics {
    return {
      componentCoupling: this.calculateCoupling(component),
      interfaceStability: this.calculateStability(component),
      testIsolation: this.calculateTestIsolation(component),
      errorContainment: this.calculateErrorContainment(component),
      configurationIsolation: this.calculateConfigIsolation(component)
    };
  }
}
```

## üîß ISOLATION PATTERNS

### Dependency Injection Pattern

**Service Container**
```typescript
class IsolatedServiceContainer {
  private services: Map<string, any> = new Map();
  private factories: Map<string, () => any> = new Map();

  register<T>(name: string, factory: () => T): void {
    this.factories.set(name, factory);
  }

  get<T>(name: string): T {
    if (!this.services.has(name)) {
      const factory = this.factories.get(name);
      if (!factory) {
        throw new Error(`Service not registered: ${name}`);
      }
      this.services.set(name, factory());
    }
    return this.services.get(name);
  }

  createIsolatedScope(): IsolatedServiceContainer {
    // Create new container with same factories but isolated instances
    const scope = new IsolatedServiceContainer();
    this.factories.forEach((factory, name) => {
      scope.register(name, factory);
    });
    return scope;
  }
}
```

### Event-Driven Isolation

**Isolated Event System**
```typescript
class IsolatedEventBus {
  private handlers: Map<string, Set<EventHandler>> = new Map();

  subscribe(event: string, handler: EventHandler): void {
    if (!this.handlers.has(event)) {
      this.handlers.set(event, new Set());
    }
    this.handlers.get(event)!.add(handler);
  }

  async publish(event: string, data: any): Promise<void> {
    const handlers = this.handlers.get(event);
    if (!handlers) return;

    // Execute handlers in isolation
    const promises = Array.from(handlers).map(async (handler) => {
      try {
        await handler(data);
      } catch (error) {
        // Isolate errors to prevent cascade failures
        console.error(`Handler error for event ${event}:`, error);
      }
    });

    await Promise.allSettled(promises);
  }
}
```

## üéØ ISOLATION BEST PRACTICES

### Design Guidelines

**Component Design**
1. Single Responsibility: Each component has one clear purpose
2. Interface Segregation: Small, focused interfaces
3. Dependency Inversion: Depend on abstractions, not concretions
4. Open/Closed: Open for extension, closed for modification

**Error Isolation**
1. Fail Fast: Detect errors early and locally
2. Error Boundaries: Contain errors within components
3. Graceful Degradation: Continue operation when possible
4. Recovery Mechanisms: Automatic recovery from failures

**Configuration Isolation**
1. Environment-Specific: Separate configs per environment
2. Validation: Validate all configuration at startup
3. Immutability: Configuration should be immutable at runtime
4. Defaults: Provide sensible defaults for all settings

### Anti-Patterns to Avoid

**Tight Coupling Anti-Patterns**
- Direct file system access from business logic
- Hard-coded dependencies between modes
- Shared mutable state between components
- Global variables and singletons

**Poor Isolation Anti-Patterns**
- Catching and ignoring errors from other components
- Mixing configuration with business logic
- Testing multiple components together
- Shared test data between test suites

This isolated design methodology ensures Memory Bank components remain maintainable, testable, and scalable through clear separation of concerns and minimal coupling.
