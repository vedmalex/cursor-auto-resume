---
description: "Apply this rule when versioning creative work to implement Creative Versioning System for version control and evolution tracking of architectural decisions and design solutions. Ensures proper creative work lifecycle management."
globs: "**/creative/**", "**/documentation/**", "**/versioning/**"
alwaysApply: false
---

# CREATIVE VERSIONING SYSTEM

> **TL;DR:** Comprehensive version control system for architectural decisions and design solutions that tracks evolution, alternatives, and implementation outcomes while maintaining full traceability and enabling rollback capabilities.

## 🔄 VERSIONING OVERVIEW

The Creative Versioning System provides structured version control for architectural decisions, enabling teams to track decision evolution, maintain alternatives, and learn from implementation outcomes. This system goes beyond traditional file versioning to capture the reasoning, context, and impact of each decision iteration.

```mermaid
graph TD
    Decision["📋 ARCHITECTURAL DECISION"] --> Initial["v1.0 Initial Decision"]
    Initial --> Minor["v1.1 Minor Updates"]
    Initial --> Major["v2.0 Major Revision"]

    Minor --> Implementation["v1.2 Implementation Updates"]
    Major --> Alternative["v2.1 Alternative Approach"]

    Implementation --> Lessons["v1.3 Lessons Learned"]
    Alternative --> Validation["v2.2 Validation Results"]

    Lessons --> Archive["📚 Archive v1.x"]
    Validation --> Current["✅ Current Active"]

    Archive --> Reference["🔍 Reference Only"]
    Current --> NextMajor["v3.0 Next Evolution"]

    style Decision fill:#4da6ff,stroke:#0066cc,color:white
    style Initial fill:#80bfff,stroke:#4da6ff,color:black
    style Current fill:#5fd94d,stroke:#3da336,color:white
    style Archive fill:#ffa64d,stroke:#cc7a30,color:white
    style Reference fill:#d3d3d3,stroke:#a9a9a9,color:black
```

## 📋 VERSION STRUCTURE

### Version Numbering System

**Semantic Versioning for Decisions**
- **MAJOR.MINOR.PATCH** format
- **MAJOR**: Fundamental approach changes
- **MINOR**: Significant updates or alternatives
- **PATCH**: Implementation details and lessons learned

**Version Categories**
- **1.0**: Initial decision documentation
- **1.x**: Refinements and implementation updates
- **2.0**: Major revision or alternative approach
- **x.y.z**: Patch-level implementation learnings

### Version Metadata Structure

```yaml
decision_metadata:
  id: "ARCH-2024-12-09-001"
  title: "Task Continuity Architecture"
  current_version: "2.1"

  version_history:
    - version: "1.0"
      date: "2024-12-09T09:00:00Z"
      author: "Memory Bank System"
      type: "initial"
      status: "superseded"
      changes: "Initial architecture decision for task continuity system"
      implementation_status: "planned"
      quality_score: 7.5

    - version: "1.1"
      date: "2024-12-09T11:30:00Z"
      author: "Memory Bank System"
      type: "minor"
      status: "superseded"
      changes: "Added migration document structure and validation rules"
      implementation_status: "in_progress"
      quality_score: 8.2
      parent_version: "1.0"

    - version: "2.0"
      date: "2024-12-09T14:00:00Z"
      author: "Memory Bank System"
      type: "major"
      status: "superseded"
      changes: "Complete redesign with YAML-based migration system"
      implementation_status: "implemented"
      quality_score: 9.1
      parent_version: "1.1"
      breaking_changes: true

    - version: "2.1"
      date: "2024-12-09T16:45:00Z"
      author: "Memory Bank System"
      type: "patch"
      status: "active"
      changes: "Added validation rules and error handling based on implementation feedback"
      implementation_status: "validated"
      quality_score: 9.4
      parent_version: "2.0"

  alternatives:
    - version: "1.5-alt"
      date: "2024-12-09T13:00:00Z"
      title: "JSON-based Migration Alternative"
      status: "rejected"
      reason: "YAML provides better human readability"
      parent_version: "1.1"

  branches:
    main: "2.1"
    experimental: "3.0-beta"
    deprecated: ["1.0", "1.1"]
    alternatives: ["1.5-alt"]
```

## 🌳 BRANCHING STRATEGY

### Decision Branches

**Main Branch**
- **Purpose**: Current active decision
- **Status**: Production-ready
- **Updates**: Only validated changes
- **Quality Gate**: High quality score required

**Development Branch**
- **Purpose**: Work-in-progress updates
- **Status**: Under development
- **Updates**: Frequent iterations
- **Quality Gate**: Basic validation required

**Alternative Branches**
- **Purpose**: Alternative approaches
- **Status**: Experimental or comparative
- **Updates**: Independent evolution
- **Quality Gate**: Proof-of-concept level

**Experimental Branch**
- **Purpose**: Future possibilities
- **Status**: Research and exploration
- **Updates**: Rapid prototyping
- **Quality Gate**: Concept validation

**Deprecated Branch**
- **Purpose**: Superseded decisions
- **Status**: Historical reference
- **Updates**: Read-only
- **Quality Gate**: Archival quality

### Branch Management Rules

```yaml
branch_rules:
  main:
    protection: true
    required_reviews: 1
    quality_threshold: 8.0
    implementation_required: true

  development:
    protection: false
    required_reviews: 0
    quality_threshold: 6.0
    implementation_required: false

  alternatives:
    protection: false
    required_reviews: 1
    quality_threshold: 7.0
    implementation_required: false
    comparison_required: true

  experimental:
    protection: false
    required_reviews: 0
    quality_threshold: 5.0
    implementation_required: false

  deprecated:
    protection: true
    required_reviews: 0
    read_only: true
    archival_required: true
```

## 📊 VERSION COMPARISON

### Comparison Framework

**Decision Comparison Matrix**
```yaml
comparison:
  decisions: ["v1.0", "v2.0", "v2.1"]
  criteria:
    - implementation_complexity
    - maintainability
    - performance_impact
    - developer_experience
    - scalability
    - security
    - cost

  scores:
    v1.0:
      implementation_complexity: 6.0
      maintainability: 5.5
      performance_impact: 7.0
      developer_experience: 6.5
      scalability: 5.0
      security: 7.5
      cost: 8.0
      overall: 6.5

    v2.0:
      implementation_complexity: 8.0
      maintainability: 8.5
      performance_impact: 8.5
      developer_experience: 9.0
      scalability: 9.0
      security: 8.5
      cost: 7.0
      overall: 8.4

    v2.1:
      implementation_complexity: 8.5
      maintainability: 9.0
      performance_impact: 8.5
      developer_experience: 9.2
      scalability: 9.0
      security: 9.0
      cost: 7.0
      overall: 8.7
```

### Evolution Analysis

**Decision Evolution Tracking**
- **Complexity Trend**: Track how complexity changes over versions
- **Quality Improvement**: Measure quality score progression
- **Implementation Success**: Track implementation outcomes
- **Adoption Rate**: Monitor how quickly new versions are adopted
- **Rollback Frequency**: Track how often rollbacks occur

**Evolution Metrics**
```json
{
  "evolution_metrics": {
    "decision_id": "ARCH-2024-12-09-001",
    "total_versions": 4,
    "active_branches": 2,
    "quality_trend": "improving",
    "complexity_trend": "stable",
    "implementation_success_rate": 0.95,
    "average_time_between_versions": "2.5 hours",
    "rollback_count": 0,
    "alternative_count": 1,
    "reuse_count": 3
  }
}
```

## 🔄 VERSION LIFECYCLE

### Lifecycle States

**Planning State**
- **Status**: Under consideration
- **Activities**: Requirements gathering, initial research
- **Outputs**: Problem statement, initial approaches
- **Next State**: Development

**Development State**
- **Status**: Active development
- **Activities**: Solution design, alternative evaluation
- **Outputs**: Decision document, implementation plan
- **Next State**: Review or Implementation

**Review State**
- **Status**: Under review
- **Activities**: Peer review, quality assessment
- **Outputs**: Review feedback, quality score
- **Next State**: Implementation or Development

**Implementation State**
- **Status**: Being implemented
- **Activities**: Code implementation, testing
- **Outputs**: Implementation results, lessons learned
- **Next State**: Validation or Rollback

**Validation State**
- **Status**: Post-implementation validation
- **Activities**: Performance testing, user feedback
- **Outputs**: Validation results, quality metrics
- **Next State**: Active or Revision

**Active State**
- **Status**: Production use
- **Activities**: Monitoring, maintenance
- **Outputs**: Usage metrics, improvement suggestions
- **Next State**: Revision or Deprecation

**Deprecated State**
- **Status**: No longer recommended
- **Activities**: Migration planning, documentation
- **Outputs**: Migration guide, historical record
- **Next State**: Archived

**Archived State**
- **Status**: Historical reference only
- **Activities**: Long-term storage, occasional reference
- **Outputs**: Archived documentation
- **Next State**: Final (permanent)

### State Transition Rules

```yaml
state_transitions:
  planning:
    allowed_next: ["development", "cancelled"]
    required_artifacts: ["problem_statement"]

  development:
    allowed_next: ["review", "implementation", "cancelled"]
    required_artifacts: ["decision_document", "alternatives_analysis"]

  review:
    allowed_next: ["implementation", "development", "rejected"]
    required_artifacts: ["review_feedback", "quality_assessment"]

  implementation:
    allowed_next: ["validation", "rollback", "failed"]
    required_artifacts: ["implementation_results", "test_results"]

  validation:
    allowed_next: ["active", "revision", "rollback"]
    required_artifacts: ["validation_results", "performance_metrics"]

  active:
    allowed_next: ["revision", "deprecation"]
    required_artifacts: ["usage_metrics", "maintenance_log"]

  deprecated:
    allowed_next: ["archived"]
    required_artifacts: ["migration_guide", "deprecation_notice"]

  archived:
    allowed_next: []
    required_artifacts: ["final_documentation", "lessons_learned"]
```

## 🔍 VERSION DISCOVERY

### Version Search Capabilities

**Version-Aware Search**
- **Current Versions**: Find only active versions
- **Historical Search**: Search across all versions
- **Evolution Search**: Find decisions with similar evolution patterns
- **Quality Search**: Find versions above quality threshold
- **Implementation Search**: Find successfully implemented versions

**Search Query Examples**
```bash
# Find current version of all architecture decisions
search --type=architecture --version=current

# Find all versions of a specific decision
search --decision-id=ARCH-2024-12-09-001 --all-versions

# Find high-quality versions from last month
search --quality-score=">8.0" --date-range="2024-11-01:2024-11-30" --version=active

# Find decisions with successful implementation
search --implementation-status=validated --version=active

# Find alternatives for a specific decision
search --decision-id=ARCH-2024-12-09-001 --branch=alternatives
```

### Version Recommendations

**Upgrade Recommendations**
- **Quality Improvements**: Suggest upgrades to higher quality versions
- **Security Updates**: Recommend versions with security improvements
- **Performance Enhancements**: Suggest versions with better performance
- **Maintenance Simplification**: Recommend versions with better maintainability

**Rollback Recommendations**
- **Implementation Issues**: Suggest rollback when implementation fails
- **Performance Degradation**: Recommend previous version if performance drops
- **Complexity Increase**: Suggest simpler previous version if complexity becomes problematic
- **Quality Regression**: Recommend rollback if quality scores decrease

## 📈 VERSION ANALYTICS

### Version Performance Metrics

**Quality Metrics by Version**
```json
{
  "quality_analytics": {
    "decision_id": "ARCH-2024-12-09-001",
    "versions": {
      "1.0": {
        "quality_score": 7.5,
        "implementation_success": 0.8,
        "maintenance_cost": "high",
        "developer_satisfaction": 6.5,
        "performance_impact": "neutral"
      },
      "2.0": {
        "quality_score": 9.1,
        "implementation_success": 0.95,
        "maintenance_cost": "low",
        "developer_satisfaction": 8.8,
        "performance_impact": "positive"
      },
      "2.1": {
        "quality_score": 9.4,
        "implementation_success": 0.98,
        "maintenance_cost": "very_low",
        "developer_satisfaction": 9.2,
        "performance_impact": "positive"
      }
    }
  }
}
```

**Evolution Patterns**
- **Quality Progression**: Track quality improvements over time
- **Complexity Evolution**: Monitor complexity changes
- **Implementation Success**: Track implementation success rates
- **Adoption Speed**: Measure how quickly new versions are adopted
- **Rollback Patterns**: Analyze when and why rollbacks occur

### Usage Analytics

**Version Usage Statistics**
```json
{
  "usage_analytics": {
    "decision_id": "ARCH-2024-12-09-001",
    "current_version": "2.1",
    "usage_distribution": {
      "2.1": 0.85,
      "2.0": 0.12,
      "1.1": 0.03,
      "deprecated": 0.00
    },
    "adoption_timeline": {
      "2.1_release": "2024-12-09T16:45:00Z",
      "50_percent_adoption": "2024-12-10T08:00:00Z",
      "90_percent_adoption": "2024-12-11T12:00:00Z"
    },
    "migration_patterns": {
      "1.0_to_2.0": {
        "migration_time": "4 hours",
        "success_rate": 0.95,
        "rollback_rate": 0.05
      },
      "2.0_to_2.1": {
        "migration_time": "1 hour",
        "success_rate": 0.98,
        "rollback_rate": 0.02
      }
    }
  }
}
```

## 🔧 VERSION MANAGEMENT TOOLS

### Automated Version Management

**Auto-Versioning Rules**
- **Patch Increment**: Automatic for implementation updates
- **Minor Increment**: Manual approval for significant changes
- **Major Increment**: Requires architectural review
- **Branch Creation**: Automatic for alternatives and experiments

**Version Validation**
- **Quality Gates**: Automated quality score validation
- **Dependency Checks**: Verify compatibility with dependent decisions
- **Implementation Validation**: Ensure implementation feasibility
- **Security Review**: Automated security impact assessment

### Version Operations

**Version Creation**
```bash
# Create new minor version
create-version --decision-id=ARCH-2024-12-09-001 --type=minor --changes="Added validation rules"

# Create alternative version
create-version --decision-id=ARCH-2024-12-09-001 --type=alternative --title="JSON-based approach"

# Create experimental version
create-version --decision-id=ARCH-2024-12-09-001 --type=experimental --branch=future-v3
```

**Version Comparison**
```bash
# Compare two versions
compare-versions --decision-id=ARCH-2024-12-09-001 --versions=1.0,2.1

# Compare with alternatives
compare-versions --decision-id=ARCH-2024-12-09-001 --include-alternatives

# Generate evolution report
evolution-report --decision-id=ARCH-2024-12-09-001 --format=markdown
```

**Version Migration**
```bash
# Migrate to new version
migrate-version --from=2.0 --to=2.1 --decision-id=ARCH-2024-12-09-001

# Rollback to previous version
rollback-version --to=2.0 --decision-id=ARCH-2024-12-09-001 --reason="Performance issues"

# Bulk migration
bulk-migrate --from-version=1.x --to-version=2.1 --pattern="task-*"
```

## 🎯 INTEGRATION WITH MEMORY BANK

### Mode Integration

**VAN Mode Integration**
- **Version Discovery**: Find relevant decision versions during planning
- **Quality Filtering**: Show only high-quality versions
- **Evolution Insights**: Display decision evolution patterns
- **Recommendation Engine**: Suggest best versions for current context

**CREATIVE Mode Integration**
- **Version Creation**: Automatically create new versions during creative sessions
- **Alternative Tracking**: Capture alternative approaches as version branches
- **Quality Assessment**: Real-time quality scoring of new versions
- **Evolution Planning**: Plan version evolution during creative phases

**IMPLEMENT Mode Integration**
- **Implementation Tracking**: Track implementation progress by version
- **Validation Recording**: Record implementation outcomes
- **Lesson Capture**: Capture implementation lessons as version updates
- **Rollback Support**: Enable quick rollback if implementation fails

**REFLECT Mode Integration**
- **Version Analysis**: Analyze version effectiveness post-implementation
- **Quality Scoring**: Update quality scores based on real-world performance
- **Evolution Planning**: Plan next version based on reflection insights
- **Pattern Recognition**: Identify successful version evolution patterns

**ARCHIVE Mode Integration**
- **Version Archival**: Archive deprecated versions with full context
- **Evolution Documentation**: Document complete version evolution
- **Pattern Preservation**: Preserve successful evolution patterns
- **Knowledge Transfer**: Transfer version insights to institutional knowledge

This Creative Versioning System provides comprehensive version control for architectural decisions, enabling teams to track evolution, maintain quality, and learn from implementation outcomes while preserving full decision context and traceability.