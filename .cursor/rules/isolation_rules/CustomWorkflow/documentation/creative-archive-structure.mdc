---
description: "Apply this rule when organizing creative archives to implement Creative Archive Structure Management with hierarchical organization and indexing system for creative phase results. Ensures systematic creative work preservation."
globs: "**/creative/**", "**/documentation/**", "**/archive/**"
alwaysApply: false
---

# CREATIVE ARCHIVE STRUCTURE MANAGEMENT

> **TL;DR:** Comprehensive system for organizing, indexing, and versioning creative phase results in a hierarchical structure that supports efficient search, discovery, and reuse of architectural decisions and design solutions.

## 🏗️ ARCHIVE STRUCTURE OVERVIEW

The Creative Archive Structure provides a systematic approach to organizing creative phase results across multiple dimensions: time, project, type, and complexity. This enables efficient storage, retrieval, and analysis of architectural decisions and design solutions.

```mermaid
graph TD
    Archive["🗄️ CREATIVE ARCHIVE"] --> Projects["📁 BY PROJECT"]
    Archive --> Types["🏷️ BY TYPE"]
    Archive --> Time["📅 BY TIME"]
    Archive --> Complexity["🎯 BY COMPLEXITY"]

    Projects --> ProjectA["Project Alpha"]
    Projects --> ProjectB["Project Beta"]
    Projects --> ProjectC["Project Gamma"]

    Types --> Architecture["🏛️ Architecture"]
    Types --> Algorithms["⚙️ Algorithms"]
    Types --> UIUX["🎨 UI/UX"]
    Types --> DataModels["📊 Data Models"]
    Types --> Patterns["🔄 Patterns"]

    Time --> Daily["📅 Daily"]
    Time --> Weekly["📊 Weekly"]
    Time --> Monthly["📈 Monthly"]
    Time --> Quarterly["📋 Quarterly"]

    Complexity --> Level1["Level 1: Quick Fix"]
    Complexity --> Level2["Level 2: Enhancement"]
    Complexity --> Level3["Level 3: Feature"]
    Complexity --> Level4["Level 4: System"]

    style Archive fill:#4da6ff,stroke:#0066cc,color:white
    style Projects fill:#80bfff,stroke:#4da6ff,color:black
    style Types fill:#80bfff,stroke:#4da6ff,color:black
    style Time fill:#80bfff,stroke:#4da6ff,color:black
    style Complexity fill:#80bfff,stroke:#4da6ff,color:black
```

## 📁 HIERARCHICAL DIRECTORY STRUCTURE

### Primary Structure

```
memory-bank/creative/
├── projects/                    # Project-based organization
│   ├── cursor-memory-bank/
│   │   ├── 2024/
│   │   │   ├── 12/
│   │   │   │   ├── 09/
│   │   │   │   │   ├── task-continuity-architecture.md
│   │   │   │   │   ├── creative-archive-architecture.md
│   │   │   │   │   └── migration-system-design.md
│   │   │   │   └── index.md
│   │   │   └── index.md
│   │   └── index.md
│   └── index.md
├── types/                       # Type-based organization
│   ├── architecture/
│   │   ├── system-design/
│   │   ├── component-design/
│   │   ├── integration-patterns/
│   │   └── index.md
│   ├── algorithms/
│   │   ├── search-algorithms/
│   │   ├── optimization/
│   │   ├── data-processing/
│   │   └── index.md
│   ├── ui-ux/
│   │   ├── user-flows/
│   │   ├── interface-design/
│   │   ├── interaction-patterns/
│   │   └── index.md
│   ├── data-models/
│   │   ├── database-schemas/
│   │   ├── api-models/
│   │   ├── data-structures/
│   │   └── index.md
│   └── patterns/
│       ├── design-patterns/
│       ├── architectural-patterns/
│       ├── integration-patterns/
│       └── index.md
├── complexity/                  # Complexity-based organization
│   ├── level-1-quick-fix/
│   ├── level-2-enhancement/
│   ├── level-3-feature/
│   ├── level-4-system/
│   └── index.md
├── timeline/                    # Time-based organization
│   ├── 2024/
│   │   ├── Q4/
│   │   │   ├── december/
│   │   │   │   ├── week-1/
│   │   │   │   ├── week-2/
│   │   │   │   └── index.md
│   │   │   └── index.md
│   │   └── index.md
│   └── index.md
├── search-index/                # Search and indexing
│   ├── decisions.index
│   ├── patterns.index
│   ├── technologies.index
│   ├── keywords.index
│   └── metadata.index
├── metrics/                     # Analytics and metrics
│   ├── effectiveness/
│   ├── reuse-patterns/
│   ├── quality-scores/
│   └── success-rates/
└── templates/                   # Documentation templates
    ├── architecture-decision-record.md
    ├── algorithm-design-doc.md
    ├── ui-ux-design-spec.md
    ├── data-model-spec.md
    └── pattern-documentation.md
```

## 🏷️ CATEGORIZATION SYSTEM

### Type-Based Categories

**🏛️ Architecture Category**
- **System Design**: High-level system architecture decisions
- **Component Design**: Individual component architecture
- **Integration Patterns**: Service integration approaches
- **Deployment Architecture**: Infrastructure and deployment decisions

**⚙️ Algorithms Category**
- **Search Algorithms**: Search and discovery implementations
- **Optimization**: Performance optimization approaches
- **Data Processing**: Data transformation and processing logic
- **Machine Learning**: AI/ML algorithm implementations

**🎨 UI/UX Category**
- **User Flows**: User journey and workflow designs
- **Interface Design**: Visual design and layout decisions
- **Interaction Patterns**: User interaction and behavior patterns
- **Accessibility**: Accessibility design decisions

**📊 Data Models Category**
- **Database Schemas**: Database design and structure
- **API Models**: API data structure definitions
- **Data Structures**: In-memory data organization
- **Data Flow**: Data movement and transformation patterns

**🔄 Patterns Category**
- **Design Patterns**: Software design pattern applications
- **Architectural Patterns**: System-level pattern implementations
- **Integration Patterns**: Service integration patterns
- **Security Patterns**: Security implementation patterns

### Complexity-Based Categories

**Level 1: Quick Fix**
- Simple bug fixes and minor adjustments
- Single-component modifications
- Minimal architectural impact

**Level 2: Enhancement**
- Feature enhancements and improvements
- Multi-component modifications
- Moderate architectural impact

**Level 3: Feature**
- New feature implementations
- Significant architectural decisions
- Cross-system integration

**Level 4: System**
- System-wide architectural changes
- Major technology decisions
- Enterprise-level implementations

## 🔍 INDEXING SYSTEM

### Search Index Structure

**Decision Index (`decisions.index`)**
```json
{
  "decisions": [
    {
      "id": "ARCH-2024-12-09-001",
      "title": "Task Continuity Architecture",
      "type": "architecture",
      "complexity": "level-3",
      "project": "cursor-memory-bank",
      "date": "2024-12-09",
      "keywords": ["task-management", "continuity", "migration"],
      "technologies": ["yaml", "git", "memory-bank"],
      "quality_score": 9.2,
      "reuse_count": 0,
      "file_path": "projects/cursor-memory-bank/2024/12/09/task-continuity-architecture.md"
    }
  ]
}
```

**Pattern Index (`patterns.index`)**
```json
{
  "patterns": [
    {
      "id": "PATTERN-2024-12-09-001",
      "name": "Migration Document Pattern",
      "category": "data-management",
      "description": "YAML-based document for preserving development context",
      "applications": ["task-continuity", "state-preservation"],
      "effectiveness_score": 9.5,
      "usage_frequency": "high",
      "related_decisions": ["ARCH-2024-12-09-001"]
    }
  ]
}
```

**Technology Index (`technologies.index`)**
```json
{
  "technologies": [
    {
      "name": "YAML",
      "category": "data-format",
      "usage_contexts": ["configuration", "migration-documents", "metadata"],
      "decisions_using": ["ARCH-2024-12-09-001"],
      "effectiveness_rating": 8.7,
      "adoption_trend": "increasing"
    }
  ]
}
```

**Keyword Index (`keywords.index`)**
```json
{
  "keywords": [
    {
      "keyword": "task-continuity",
      "frequency": 15,
      "related_decisions": ["ARCH-2024-12-09-001", "ARCH-2024-12-08-003"],
      "related_patterns": ["PATTERN-2024-12-09-001"],
      "importance_score": 9.1
    }
  ]
}
```

**Metadata Index (`metadata.index`)**
```json
{
  "metadata": {
    "total_decisions": 127,
    "total_patterns": 45,
    "total_technologies": 23,
    "last_updated": "2024-12-09T10:30:00Z",
    "index_version": "1.2.0",
    "categories": {
      "architecture": 45,
      "algorithms": 23,
      "ui-ux": 18,
      "data-models": 25,
      "patterns": 16
    },
    "complexity_distribution": {
      "level-1": 12,
      "level-2": 34,
      "level-3": 56,
      "level-4": 25
    }
  }
}
```

## 📋 VERSIONING SYSTEM

### Version Control Strategy

**Decision Versioning**
- **v1.0**: Initial decision documentation
- **v1.1**: Minor updates and clarifications
- **v2.0**: Major revisions or alternative approaches
- **v2.1**: Implementation updates and lessons learned

**Version Metadata**
```yaml
version_history:
  - version: "1.0"
    date: "2024-12-09"
    author: "Memory Bank System"
    changes: "Initial architecture decision"
    status: "active"
  - version: "1.1"
    date: "2024-12-10"
    author: "Memory Bank System"
    changes: "Added implementation details"
    status: "active"
  - version: "2.0"
    date: "2024-12-15"
    author: "Memory Bank System"
    changes: "Major revision based on implementation feedback"
    status: "active"
    supersedes: ["1.0", "1.1"]
```

### Branching Strategy for Decisions

**Decision Branches**
- **main**: Current active decision
- **alternatives**: Alternative approaches considered
- **deprecated**: Superseded decisions
- **experimental**: Proof-of-concept approaches

## 🔄 AUTOMATED ORGANIZATION

### Auto-Categorization Rules

**File Naming Convention**
```
{type}-{date}-{project}-{sequence}-{title}.md

Examples:
- arch-2024-12-09-cursor-memory-bank-001-task-continuity.md
- algo-2024-12-09-search-engine-001-indexing-strategy.md
- uiux-2024-12-09-dashboard-001-user-flow.md
```

**Auto-Filing Rules**
1. **By Date**: Automatically file in timeline structure
2. **By Type**: Extract type from filename prefix
3. **By Project**: Extract project from filename
4. **By Complexity**: Analyze content for complexity indicators

### Index Maintenance

**Automatic Index Updates**
- **Real-time**: Update indexes when files are created/modified
- **Batch**: Nightly index optimization and cleanup
- **Validation**: Weekly index integrity checks
- **Backup**: Daily index backups

## 📊 SEARCH AND DISCOVERY

### Search Capabilities

**Multi-dimensional Search**
- **By Keywords**: Full-text search across all documents
- **By Technology**: Find decisions using specific technologies
- **By Pattern**: Locate pattern applications
- **By Date Range**: Time-based filtering
- **By Complexity**: Filter by implementation complexity
- **By Quality Score**: Find highest-rated decisions

**Search Query Examples**
```bash
# Find all architecture decisions about task management
search --type=architecture --keywords="task management"

# Find Level 3 decisions from last month
search --complexity=level-3 --date-range="2024-11-01:2024-11-30"

# Find high-quality UI/UX patterns
search --type=ui-ux --quality-score=">8.0" --category=patterns

# Find decisions using YAML technology
search --technology=yaml --sort=date-desc
```

### Discovery Features

**Related Decision Discovery**
- **Similar Patterns**: Find decisions using similar approaches
- **Technology Overlap**: Decisions using same technology stack
- **Temporal Proximity**: Decisions made around same time
- **Complexity Similarity**: Decisions of similar complexity

**Recommendation Engine**
- **Pattern Suggestions**: Recommend proven patterns for new decisions
- **Technology Recommendations**: Suggest technologies based on success rates
- **Alternative Approaches**: Show alternative solutions for similar problems
- **Quality Insights**: Highlight high-quality decision examples

## 🎯 INTEGRATION POINTS

### Memory Bank Mode Integration

**VAN Mode Integration**
- **Decision Discovery**: Search for relevant past decisions
- **Pattern Recommendations**: Suggest applicable patterns
- **Technology Guidance**: Recommend proven technology choices
- **Quality Benchmarks**: Show quality standards for similar decisions

**CREATIVE Mode Integration**
- **Real-time Archiving**: Automatically capture creative phase results
- **Pattern Recognition**: Identify emerging patterns during creative sessions
- **Quality Assessment**: Real-time quality scoring of decisions
- **Alternative Tracking**: Capture considered alternatives

**REFLECT Mode Integration**
- **Decision Analysis**: Analyze effectiveness of implemented decisions
- **Pattern Validation**: Validate pattern effectiveness
- **Quality Scoring**: Score decision quality based on outcomes
- **Lesson Extraction**: Extract lessons learned for future reference

**ARCHIVE Mode Integration**
- **Long-term Storage**: Move decisions to long-term archive
- **Knowledge Consolidation**: Consolidate related decisions
- **Pattern Crystallization**: Formalize successful patterns
- **Institutional Memory**: Build organizational knowledge base

## 📈 ANALYTICS AND METRICS

### Decision Effectiveness Metrics

**Quality Scores**
- **Implementation Success**: How well the decision worked in practice
- **Maintainability**: How easy it was to maintain the solution
- **Performance Impact**: Effect on system performance
- **Developer Experience**: Impact on development productivity
- **Reusability**: How often the decision pattern is reused

**Pattern Success Rates**
- **Adoption Rate**: How often patterns are chosen
- **Success Rate**: Percentage of successful implementations
- **Modification Rate**: How often patterns need modification
- **Abandonment Rate**: How often patterns are abandoned

### Usage Analytics

**Search Analytics**
- **Popular Keywords**: Most searched terms
- **Common Queries**: Frequently used search patterns
- **Discovery Paths**: How users find relevant decisions
- **Success Rates**: How often searches lead to useful results

**Reuse Analytics**
- **Most Reused Patterns**: Patterns with highest reuse rates
- **Technology Trends**: Technology adoption and success trends
- **Decision Longevity**: How long decisions remain relevant
- **Evolution Patterns**: How decisions evolve over time

## 🔧 MAINTENANCE AND OPTIMIZATION

### Archive Maintenance

**Regular Maintenance Tasks**
- **Index Optimization**: Weekly index performance optimization
- **Dead Link Cleanup**: Monthly cleanup of broken references
- **Duplicate Detection**: Quarterly duplicate decision detection
- **Quality Review**: Annual quality assessment and cleanup

**Archive Health Monitoring**
- **Storage Usage**: Monitor archive storage consumption
- **Search Performance**: Track search response times
- **Index Integrity**: Validate index consistency
- **Access Patterns**: Monitor usage patterns for optimization

### Performance Optimization

**Search Optimization**
- **Index Tuning**: Optimize search indexes for common queries
- **Caching Strategy**: Cache frequently accessed decisions
- **Query Optimization**: Optimize complex search queries
- **Result Ranking**: Improve search result relevance

**Storage Optimization**
- **Compression**: Compress older archive entries
- **Archival Strategy**: Move old decisions to cold storage
- **Deduplication**: Remove duplicate content
- **Cleanup Automation**: Automated cleanup of obsolete entries

This Creative Archive Structure Management system provides a comprehensive foundation for organizing, indexing, and discovering creative phase results, enabling effective knowledge accumulation and reuse across all Memory Bank development activities.