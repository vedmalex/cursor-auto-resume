---
description: "Apply this rule when debugging Memory Bank development issues to implement systematic debugging methodology. Provides structured approach to problem identification, analysis, and resolution."
globs: "**/**"
alwaysApply: false
---

# SYSTEMATIC DEBUGGING METHODOLOGY

> **TL;DR:** Comprehensive debugging approach for Memory Bank development, ensuring systematic problem identification, root cause analysis, and effective resolution strategies.

```mermaid
graph TD
    Start["üêõ DEBUGGING ACTIVATION"] --> Identify["üîç Problem Identification"]
    Identify --> Reproduce["üîÑ Reproduce Issue"]
    Reproduce --> Isolate["üéØ Isolate Root Cause"]
    Isolate --> Analyze["üìä Analyze Problem"]
    Analyze --> Solution["üí° Develop Solution"]
    Solution --> Test["‚úÖ Test Fix"]
    Test --> Verify["üîç Verify Resolution"]
    Verify --> Document["üìù Document Solution"]

    style Start fill:#ff5555,stroke:#cc0000,color:white
    style Identify fill:#ffa64d,stroke:#cc7a30,color:white
    style Solution fill:#4dbb5f,stroke:#36873f,color:white
    style Document fill:#4da6ff,stroke:#0066cc,color:white
```

## DEBUGGING METHODOLOGY

### Phase 1: Problem Identification
1. **Symptom Analysis**: Document observable symptoms
2. **Context Gathering**: Collect relevant context information
3. **Impact Assessment**: Determine severity and scope
4. **Initial Hypothesis**: Form preliminary theories

### Phase 2: Issue Reproduction
1. **Environment Setup**: Recreate problematic conditions
2. **Step Documentation**: Record exact reproduction steps
3. **Consistency Check**: Verify reproducibility
4. **Variable Isolation**: Identify contributing factors

### Phase 3: Root Cause Analysis
1. **Code Investigation**: Examine relevant code sections
2. **Data Flow Analysis**: Trace data through system
3. **Dependency Check**: Verify external dependencies
4. **Logic Validation**: Validate business logic

### Phase 4: Solution Development
1. **Fix Strategy**: Develop targeted fix approach
2. **Impact Analysis**: Assess fix implications
3. **Implementation**: Apply fix systematically
4. **Testing**: Verify fix effectiveness

## DEBUGGING TOOLS AND TECHNIQUES

### Code Analysis Tools:
- **Static Analysis**: Code review and linting
- **Dynamic Analysis**: Runtime behavior examination
- **Profiling**: Performance and memory analysis
- **Logging**: Strategic log placement and analysis

### Debugging Strategies:
- **Binary Search**: Narrow down problem location
- **Rubber Duck Debugging**: Explain problem aloud
- **Pair Debugging**: Collaborate with team member
- **Time Travel Debugging**: Use version control history

## MEMORY BANK INTEGRATION

### Debugging Documentation:
1. **debug-log.md**: Detailed debugging session log
2. **issue-analysis.md**: Comprehensive issue analysis
3. **solution-record.md**: Solution documentation
4. **prevention-notes.md**: Prevention strategies

### Integration with Memory Bank:
- Update tasks.md with debugging progress
- Document lessons learned in systemPatterns.md
- Record debugging context in activeContext.md
- Archive debugging sessions in memory-bank/debugging/

## VERIFICATION CHECKLIST

```
‚úì SYSTEMATIC DEBUGGING CHECKLIST
- Problem clearly identified and documented? [YES/NO]
- Issue successfully reproduced? [YES/NO]
- Root cause identified and verified? [YES/NO]
- Solution developed and tested? [YES/NO]
- Fix verified to resolve issue? [YES/NO]
- No regressions introduced? [YES/NO]
- Solution documented for future reference? [YES/NO]
- Prevention strategies identified? [YES/NO]

‚Üí If all YES: Debugging complete
‚Üí If any NO: Continue debugging process
```

This systematic approach ensures thorough debugging while maintaining documentation for future reference and continuous improvement.