---
description: "Always apply this rule to centrally manage artifact paths within active task directory. Provides canonical path functions for task files, context, reflection, and release artifacts across all Memory Bank modes."
globs: "**/**"
alwaysApply: true
---

# TASK ARTIFACT MANAGER

> **TL;DR:** This module is the single source of truth for all paths *within* the active task directory. Instead of constructing paths manually, other rules should call functions from this manager to get canonical paths.

## üó∫Ô∏è –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á–∏

```mermaid
graph TD
    TaskDir["<b>–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞</b><br>(.../ID-001_task/)"] --> TaskFile["_task.md"]
    TaskDir --> ContextFile["_context.md"]
    TaskDir --> ReflectionFile["_reflection.md"]
    TaskDir --> ArchiveFile["_archive.md"]
    TaskDir --> CreativeDir["creative/"]
    TaskDir --> ReportsDir["reports/"]
    TaskDir --> ReleaseDir["release/"]

    ReleaseDir --> CommitMsg["_commit_message.txt"]
    ReleaseDir --> ReleaseNotes["_release_notes.md"]

    style TaskDir fill:#ffad42,stroke:#f57c00
```

## ‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–µ–π

**–í–ê–ñ–ù–û:** –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—Ç, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–æ `Core/active-task-manager.mdc` —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Ñ—É–Ω–∫—Ü–∏—è `get_active_task_path()` –¥–æ—Å—Ç—É–ø–Ω–∞.

```bash
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ active-task-manager.mdc, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –º—ã –∑–∞–≤–∏—Å–∏–º
function get_active_task_path() { ... }

# ===== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò-–•–ï–õ–ü–ï–†–´ =====

# –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—É –∑–∞–¥–∞—á–∏ (_task.md)
function get_task_file_path() {
  local active_path
  active_path=$(get_active_task_path)
  if [ -n "$active_path" ]; then
    echo "$active_path/_task.md"
  fi
}

# –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏ (_context.md)
function get_context_file_path() {
  local active_path
  active_path=$(get_active_task_path)
  if [ -n "$active_path" ]; then
    echo "$active_path/_context.md"
  fi
}

# –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∑–∞–¥–∞—á–∏ (_reflection.md)
function get_reflection_file_path() {
  local active_path
  active_path=$(get_active_task_path)
  if [ -n "$active_path" ]; then
    echo "$active_path/_reflection.md"
  fi
}

# –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ —Ä–µ–ª–∏–∑–∞ (release/)
function get_release_path() {
  local active_path
  active_path=$(get_active_task_path)
  if [ -n "$active_path" ]; then
    echo "$active_path/release"
  fi
}

# –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –∫–æ–º–º–∏—Ç–∞
function get_commit_message_file_path() {
  local release_path
  release_path=$(get_release_path)
  if [ -n "$release_path" ]; then
    echo "$release_path/_commit_message.txt"
  fi
}

# –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∑–∞–º–µ—Ç–∫–∞–º–∏ –¥–ª—è —Ä–µ–ª–∏–∑–∞
function get_release_notes_file_path() {
  local release_path
  release_path=$(get_release_path)
  if [ -n "$release_path" ]; then
    echo "$release_path/_release_notes.md"
  fi
}