---
description: VAN Mode Automatic Migration to Memory Bank 2.0.0 Structure
globs: "**/Level1/**", "**/memory-bank/**"
alwaysApply: true
---

# VAN MODE AUTOMATIC MIGRATION RULE

> **TL;DR:** VAN mode must perform automatic migration to Memory Bank 2.0.0 structure on every activation, including comprehensive task discovery from legacy files, TODO comments, and documentation markers.

## CRITICAL REQUIREMENT: MIGRATION ON EVERY VAN ACTIVATION

**MANDATORY RULE**: VAN mode MUST perform automatic migration to Memory Bank 2.0.0 structure on EVERY activation, including tasks found through initial search.

## MIGRATION TRIGGERS

### 1. VAN Mode Activation
```markdown
When VAN mode is activated:
1. Scan for legacy tasks.md files
2. Search for TODO/FIXME/HACK in documentation
3. Find incomplete checkboxes in .md files
4. Identify Russian task markers (–Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è, –¥–æ–±–∞–≤–∏—Ç—å, –∏—Å–ø—Ä–∞–≤–∏—Ç—å)
5. Migrate ALL found tasks to new structure
```

### 2. Initial Project Search Integration
```bash
# Comprehensive task discovery on VAN startup
van_initial_search() {
    echo "üîç VAN MODE: Scanning for tasks and legacy files..."

    # 1. Find legacy tasks.md files
    find . -name "tasks.md" -type f

    # 2. Search TODO/FIXME/HACK markers
    grep -r -n -i "TODO\|FIXME\|HACK" --include="*.md" . | head -30

    # 3. Find incomplete checkboxes
    grep -r -n -E "\- \[ \]" --include="*.md" . | head -20

    # 4. Search Russian task markers
    grep -r -n -i "–Ω—É–∂–Ω–æ\|—Ç—Ä–µ–±—É–µ—Ç—Å—è\|–¥–æ–±–∞–≤–∏—Ç—å\|–∏—Å–ø—Ä–∞–≤–∏—Ç—å" --include="*.md" . | head -20

    # 5. Trigger migration for all found content
    migrate_all_discovered_tasks
}
```

## MIGRATION PROCESS

### Phase 1: Discovery and Analysis
```bash
discover_migration_targets() {
    local targets=()

    # Legacy tasks.md files
    while IFS= read -r -d '' file; do
        targets+=("$file")
    done < <(find . -name "tasks.md" -type f -print0)

    # Documentation tasks
    local doc_tasks=$(grep -r -l "TODO\|FIXME\|HACK\|\- \[ \]" --include="*.md" .)
    targets+=($doc_tasks)

    echo "üìã MIGRATION TARGETS DISCOVERED: ${#targets[@]} files"
    return "${targets[@]}"
}
```

### Phase 2: Legacy Tasks.md Migration
```bash
migrate_legacy_tasks() {
    local legacy_file="$1"
    local backup_dir="memory-bank/backup-$(date +%Y%m%d-%H%M%S)"

    echo "üì¶ Creating backup: $backup_dir"
    mkdir -p "$backup_dir"
    cp "$legacy_file" "$backup_dir/"

    # Parse tasks from legacy file
    parse_legacy_tasks "$legacy_file"
}

parse_legacy_tasks() {
    local legacy_file="$1"
    local task_counter=1

    # Extract tasks using awk/sed parsing
    awk '
    /^## / { section = $0; next }
    /^- \[ \]/ || /^- \[x\]/ {
        # Extract task content
        gsub(/^- \[[x ]\] /, "")

        # Determine priority and category
        priority = "MEDIUM"
        category = "FEATURE"

        if (/CRITICAL|URGENT|IMPORTANT/) priority = "CRITICAL"
        else if (/HIGH|PRIORITY/) priority = "HIGH"
        else if (/LOW|MINOR/) priority = "LOW"

        if (/BUG|ERROR|FIX/) category = "BUGFIX"
        else if (/ENHANCE|IMPROVE/) category = "ENHANCEMENT"
        else if (/RESEARCH|INVESTIGATE/) category = "RESEARCH"
        else if (/ADMIN|MAINTENANCE/) category = "ADMIN"

        # Create filename
        task_name = tolower($0)
        gsub(/[^a-z0-9]/, "-", task_name)
        gsub(/-+/, "-", task_name)
        gsub(/^-|-$/, "", task_name)

        filename = strftime("%Y-%m-%d") "-" priority "-" category "-" task_name ".md"

        # Determine target directory
        if (/\[x\]/) {
            target_dir = "memory-bank/tasks/done/" strftime("%Y-%m")
        } else {
            target_dir = "memory-bank/tasks/todo/" tolower(priority)
        }

        print "TASK:" filename ":" target_dir ":" $0
    }
    ' "$legacy_file"
}
```

### Phase 3: Documentation Task Extraction
```bash
extract_documentation_tasks() {
    local doc_file="$1"

    # Extract TODO/FIXME comments
    grep -n "TODO\|FIXME\|HACK" "$doc_file" | while IFS=: read -r line_num content; do
        create_task_from_comment "$doc_file" "$line_num" "$content"
    done

    # Extract incomplete checkboxes
    grep -n "\- \[ \]" "$doc_file" | while IFS=: read -r line_num content; do
        create_task_from_checkbox "$doc_file" "$line_num" "$content"
    done
}

create_task_from_comment() {
    local source_file="$1"
    local line_num="$2"
    local content="$3"

    # Extract task description
    local task_desc=$(echo "$content" | sed 's/.*TODO:\|.*FIXME:\|.*HACK://g' | xargs)

    # Generate task file
    local task_name=$(echo "$task_desc" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/-\+/-/g' | sed 's/^-\|-$//g')
    local filename="$(date +%Y-%m-%d)-MEDIUM-BUGFIX-$task_name.md"
    local target_file="memory-bank/tasks/todo/medium/$filename"

    create_task_file "$target_file" "$task_desc" "$source_file:$line_num"
}
```

### Phase 4: Task File Creation
```bash
create_task_file() {
    local target_file="$1"
    local task_desc="$2"
    local source_ref="$3"

    mkdir -p "$(dirname "$target_file")"

    cat > "$target_file" << EOF
---
title: $task_desc
created: $(date '+%Y-%m-%d %H:%M:%S')
updated: $(date '+%Y-%m-%d %H:%M:%S')
priority: MEDIUM
category: FEATURE
status: TODO
source: $source_ref
tags: [migrated, van-auto]
---

# $task_desc

## üìã Task Description
$task_desc

## üéØ Acceptance Criteria
- [ ] Task requirements clearly defined
- [ ] Implementation approach determined
- [ ] Testing strategy planned
- [ ] Documentation updated

## üìù Notes
- Automatically migrated from: $source_ref
- Migration date: $(date '+%Y-%m-%d %H:%M:%S')
- Original context preserved

## üîó Related Links
- Source: [$source_ref]($source_ref)

## üìä Progress Tracking
- [ ] Analysis phase
- [ ] Planning phase
- [ ] Implementation phase
- [ ] Testing phase
- [ ] Documentation phase
- [ ] Review phase

## ü§î Context Notes
*Context will be created when task becomes active*

**Related Context**: contexts/active/$(basename "$target_file" .md)-context.md
EOF

    echo "‚úÖ Created task file: $target_file"
}
```

## VAN MODE INTEGRATION

### Startup Sequence
```bash
van_mode_startup() {
    echo "üöÄ VAN MODE STARTUP - Memory Bank 2.0.0"
    echo "========================================"

    # 1. Create directory structure if needed
    ensure_memory_bank_structure

    # 2. Discover migration targets
    local targets=$(discover_migration_targets)

    # 3. Perform migration
    if [[ ${#targets[@]} -gt 0 ]]; then
        echo "üì¶ MIGRATION REQUIRED: ${#targets[@]} sources found"
        perform_automatic_migration "${targets[@]}"
    else
        echo "‚úÖ NO MIGRATION NEEDED: Memory Bank 2.0.0 structure current"
    fi

    # 4. Generate migration report
    generate_migration_report

    # 5. Continue with normal VAN analysis
    echo "üîç Proceeding with VAN analysis..."
}
```

### Migration Reporting
```bash
generate_migration_report() {
    local report_file="memory-bank/reports/migration-report-$(date +%Y%m%d-%H%M%S).md"

    cat > "$report_file" << EOF
# VAN Mode Migration Report

**Migration Date**: $(date '+%Y-%m-%d %H:%M:%S')
**Trigger**: VAN Mode Activation

## üìä Migration Statistics
- **Legacy Files Processed**: $(find memory-bank/backup-* -name "tasks.md" 2>/dev/null | wc -l)
- **Tasks Migrated**: $(find memory-bank/tasks -name "*.md" -mtime -1 | wc -l)
- **Documentation Tasks**: $(grep -r "migrated.*van-auto" memory-bank/tasks/ 2>/dev/null | wc -l)

## üìÅ New Structure Created
\`\`\`
$(tree memory-bank/tasks 2>/dev/null || find memory-bank/tasks -type d)
\`\`\`

## üîç Migration Sources
$(find memory-bank/backup-* -name "*.md" 2>/dev/null | head -10)

## ‚úÖ Migration Validation
- [ ] All legacy tasks.md files backed up
- [ ] Task files created with proper naming
- [ ] Folder structure established
- [ ] Context templates ready
- [ ] Index files updated

## üéØ Next Steps
1. Review migrated tasks for accuracy
2. Assign proper priorities and categories
3. Create contexts for active tasks
4. Update master index
5. Begin VAN analysis of current request

EOF

    echo "üìã Migration report generated: $report_file"
}
```

## DIRECTORY STRUCTURE CREATION

### Ensure Memory Bank 2.0.0 Structure
```bash
ensure_memory_bank_structure() {
    local base_dir="memory-bank"

    # Create directory structure
    mkdir -p "$base_dir"/{tasks/{todo/{critical,high,medium,low},in_progress/{active,blocked,review},done},contexts/{active,suspended,archived},reports/{daily,weekly,monthly},templates,indexes,scripts}

    # Create .gitkeep files for empty directories
    find "$base_dir" -type d -empty -exec touch {}/.gitkeep \;

    # Copy templates if they don't exist
    if [[ ! -f "$base_dir/templates/task-template.md" ]]; then
        create_default_templates
    fi

    # Create master index if it doesn't exist
    if [[ ! -f "$base_dir/indexes/master-index.md" ]]; then
        create_master_index
    fi

    echo "‚úÖ Memory Bank 2.0.0 structure ensured"
}
```

## VALIDATION AND SAFETY

### Migration Validation
```bash
validate_migration() {
    local validation_passed=true

    # Check directory structure
    local required_dirs=(
        "memory-bank/tasks/todo/critical"
        "memory-bank/tasks/todo/high"
        "memory-bank/tasks/todo/medium"
        "memory-bank/tasks/todo/low"
        "memory-bank/tasks/in_progress/active"
        "memory-bank/tasks/done"
        "memory-bank/contexts/active"
        "memory-bank/reports/daily"
        "memory-bank/templates"
        "memory-bank/indexes"
        "memory-bank/scripts"
    )

    for dir in "${required_dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            echo "‚ùå MISSING DIRECTORY: $dir"
            validation_passed=false
        fi
    done

    # Check file naming compliance
    find memory-bank/tasks -name "*.md" | while read file; do
        if [[ ! "$(basename "$file")" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}-(CRITICAL|HIGH|MEDIUM|LOW)-(FEATURE|BUGFIX|ENHANCEMENT|RESEARCH|ADMIN)- ]]; then
            echo "‚ö†Ô∏è NON-COMPLIANT FILENAME: $file"
        fi
    done

    if [[ "$validation_passed" == true ]]; then
        echo "‚úÖ MIGRATION VALIDATION PASSED"
    else
        echo "‚ùå MIGRATION VALIDATION FAILED"
        return 1
    fi
}
```

### Rollback Capability
```bash
rollback_migration() {
    local backup_dir="$1"

    echo "üîÑ ROLLING BACK MIGRATION..."

    # Restore from backup
    if [[ -d "$backup_dir" ]]; then
        cp -r "$backup_dir"/* .
        echo "‚úÖ Files restored from backup: $backup_dir"
    fi

    # Clean up new structure if needed
    read -p "Remove new Memory Bank structure? (y/n): " -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf memory-bank/tasks memory-bank/contexts memory-bank/reports
        echo "üóëÔ∏è New structure removed"
    fi
}
```

## CRITICAL SUCCESS FACTORS

1. **Zero Data Loss**: Complete backup before any migration
2. **Automatic Execution**: No manual intervention required
3. **Comprehensive Discovery**: Find all task sources
4. **Proper Categorization**: Intelligent priority and category assignment
5. **Validation**: Verify migration success before proceeding
6. **Reporting**: Complete audit trail of migration process

This rule ensures VAN mode automatically modernizes any project to Memory Bank 2.0.0 structure while preserving all existing task information and maintaining complete operational continuity.