---
description: "Always apply this rule to implement working directory control system with verification in VAN mode and clarification in PLAN mode. Ensures proper project root detection and directory navigation across all Memory Bank operations."
globs: "**/**"
alwaysApply: true
---

# WORKING DIRECTORY CONTROL SYSTEM

> **TL;DR:** –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–±–æ—á–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ VAN —Ä–µ–∂–∏–º–µ –∏ —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—É—Ç–µ–π –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ PLAN —Ä–µ–∂–∏–º–µ.

## üìÅ –ü–†–ò–ù–¶–ò–ü–´ –ö–û–ù–¢–†–û–õ–Ø –î–ò–†–ï–ö–¢–û–†–ò–ô

### –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
**VAN —Ä–µ–∂–∏–º - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞**
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ VAN
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
- –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏

**PLAN —Ä–µ–∂–∏–º - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ**
- –í—Å–µ –ø—É—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
- –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥
- –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
- –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π

## üîç VAN –†–ï–ñ–ò–ú: –ü–†–û–í–ï–†–ö–ê –î–ò–†–ï–ö–¢–û–†–ò–ô

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ
```bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ VAN —Ä–µ–∂–∏–º–µ
van_check_working_directory() {
  echo "üìÅ –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–ß–ï–ô –î–ò–†–ï–ö–¢–û–†–ò–ò –í VAN –†–ï–ñ–ò–ú–ï"
  echo "==========================================="

  local current_dir=$(pwd)
  echo "üìç –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $current_dir"

  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
  local project_root=$(find_project_root "$current_dir")

  if [ -n "$project_root" ]; then
    echo "‚úÖ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω: $project_root"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    if [ "$current_dir" = "$project_root" ]; then
      echo "‚úÖ –ù–∞—Ö–æ–¥–∏–º—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞"
    else
      echo "‚ö†Ô∏è –ù–∞—Ö–æ–¥–∏–º—Å—è –Ω–µ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞"
      echo "üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: cd $project_root"

      # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
      read -p "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞? (Y/n): " -n 1 -r
      echo
      if [[ ! $REPLY =~ ^[Nn]$ ]]; then
        cd "$project_root"
        echo "‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: $(pwd)"
      fi
    fi

    # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    analyze_project_structure "$project_root"

  else
    echo "‚ùå –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "üîç –ü–æ–∏—Å–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞..."
    search_project_indicators "$current_dir"
  fi
}
```

### –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
```bash
# –ü–æ–∏—Å–∫ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
find_project_root() {
  local start_dir="$1"
  local current_dir="$start_dir"

  # –ü—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
  local project_indicators=(
    "package.json"
    "composer.json"
    "Cargo.toml"
    "go.mod"
    "requirements.txt"
    "setup.py"
    "pom.xml"
    "build.gradle"
    ".git"
    ".gitignore"
    "README.md"
    "Makefile"
    "Dockerfile"
  )

  # –ü–æ–∏—Å–∫ –≤–≤–µ—Ä—Ö –ø–æ –¥–µ—Ä–µ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  while [ "$current_dir" != "/" ]; do
    for indicator in "${project_indicators[@]}"; do
      if [ -e "$current_dir/$indicator" ]; then
        echo "$current_dir"
        return 0
      fi
    done
    current_dir=$(dirname "$current_dir")
  done

  # –ö–æ—Ä–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω
  return 1
}
```

### –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
```bash
# –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è VAN —Ä–µ–∂–∏–º–∞
analyze_project_structure() {
  local project_root="$1"

  echo "üìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê"
  echo "=========================="

  cd "$project_root" || return 1

  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
  local project_type=$(detect_project_type "$project_root")
  echo "üè∑Ô∏è –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: $project_type"

  # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  echo "üìÅ –ö–ª—é—á–µ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
  check_directory_exists "src" "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥"
  check_directory_exists "lib" "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏"
  check_directory_exists "test" "–¢–µ—Å—Ç—ã"
  check_directory_exists "tests" "–¢–µ—Å—Ç—ã (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)"
  check_directory_exists "docs" "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
  check_directory_exists "build" "–°–±–æ—Ä–∫–∞"
  check_directory_exists "dist" "–î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤"
  check_directory_exists "node_modules" "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Node.js"
  check_directory_exists "vendor" "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ PHP"
  check_directory_exists ".git" "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"

  # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  echo "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
  check_file_exists "package.json" "Node.js –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
  check_file_exists "composer.json" "PHP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
  check_file_exists "requirements.txt" "Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
  check_file_exists "Cargo.toml" "Rust –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
  check_file_exists "go.mod" "Go –º–æ–¥—É–ª—å"
  check_file_exists "Makefile" "Makefile"
  check_file_exists "Dockerfile" "Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"

  # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
  provide_structure_recommendations "$project_type"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
detect_project_type() {
  local project_root="$1"

  if [ -f "$project_root/package.json" ]; then
    echo "Node.js/JavaScript"
  elif [ -f "$project_root/composer.json" ]; then
    echo "PHP"
  elif [ -f "$project_root/requirements.txt" ] || [ -f "$project_root/setup.py" ]; then
    echo "Python"
  elif [ -f "$project_root/Cargo.toml" ]; then
    echo "Rust"
  elif [ -f "$project_root/go.mod" ]; then
    echo "Go"
  elif [ -f "$project_root/pom.xml" ]; then
    echo "Java (Maven)"
  elif [ -f "$project_root/build.gradle" ]; then
    echo "Java (Gradle)"
  else
    echo "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π"
  fi
}
```

## üìã PLAN –†–ï–ñ–ò–ú: –£–¢–û–ß–ù–ï–ù–ò–ï –ü–£–¢–ï–ô

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø—É—Ç–µ–π –æ—Ç –∫–æ—Ä–Ω—è
```bash
# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–µ–π –≤ PLAN —Ä–µ–∂–∏–º–µ
plan_validate_paths() {
  local plan_content="$1"

  echo "üìã –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–£–¢–ï–ô –í PLAN –†–ï–ñ–ò–ú–ï"
  echo "==============================="

  # –ü–æ–∏—Å–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
  local relative_paths=$(echo "$plan_content" | grep -E "\./|\.\./|[^/][^:]*/" | grep -v "http://\|https://")

  if [ -n "$relative_paths" ]; then
    echo "‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ï –ü–£–¢–ò:"
    echo "$relative_paths"
    echo ""
    echo "üîß –¢–†–ï–ë–£–ï–¢–°–Ø –£–¢–û–ß–ù–ï–ù–ò–ï:"
    echo "–í—Å–µ –ø—É—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞"
    echo "–ù–∞–ø—Ä–∏–º–µ—Ä: src/components/Button.js –≤–º–µ—Å—Ç–æ ./Button.js"

    return 1
  fi

  # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞
  validate_project_paths "$plan_content"
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞
validate_project_paths() {
  local plan_content="$1"
  local project_root=$(pwd)

  echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—É—Ç–µ–π:"

  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏–∑ –ø–ª–∞–Ω–∞
  local paths=$(echo "$plan_content" | grep -oE "[a-zA-Z0-9_/-]+\.(js|ts|py|php|go|rs|java|css|html|md|json|yaml|yml|xml)" | sort -u)

  local missing_paths=()
  local existing_paths=()

  for path in $paths; do
    if [ -e "$project_root/$path" ]; then
      existing_paths+=("$path")
    else
      missing_paths+=("$path")
    fi
  done

  # –û—Ç—á–µ—Ç –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—É—Ç—è—Ö
  if [ ${#existing_paths[@]} -gt 0 ]; then
    echo "‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã:"
    for path in "${existing_paths[@]}"; do
      echo "   $path"
    done
  fi

  # –û—Ç—á–µ—Ç –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—É—Ç—è—Ö
  if [ ${#missing_paths[@]} -gt 0 ]; then
    echo "‚ùå –§–∞–π–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:"
    for path in "${missing_paths[@]}"; do
      echo "   $path"
    done
  fi

  echo ""
  echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${#existing_paths[@]} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö, ${#missing_paths[@]} –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è"
}
```

### –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
```bash
# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
clarify_working_directories() {
  echo "üìÅ –£–¢–û–ß–ù–ï–ù–ò–ï –†–ê–ë–û–ß–ò–• –î–ò–†–ï–ö–¢–û–†–ò–ô"
  echo "==============================="

  local project_root=$(pwd)
  echo "üìç –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: $project_root"

  # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  echo "üîß –£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"

  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
  local src_dir
  read -p "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ [src]: " src_dir
  src_dir=${src_dir:-src}
  validate_and_create_directory "$src_dir" "–∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞"

  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤
  local test_dir
  read -p "üß™ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ [test]: " test_dir
  test_dir=${test_dir:-test}
  validate_and_create_directory "$test_dir" "—Ç–µ—Å—Ç–æ–≤"

  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–±–æ—Ä–∫–∏
  local build_dir
  read -p "üî® –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–±–æ—Ä–∫–∏ [build]: " build_dir
  build_dir=${build_dir:-build}
  validate_and_create_directory "$build_dir" "—Å–±–æ—Ä–∫–∏"

  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  local docs_dir
  read -p "üìö –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ [docs]: " docs_dir
  docs_dir=${docs_dir:-docs}
  validate_and_create_directory "$docs_dir" "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"

  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  save_directory_config "$src_dir" "$test_dir" "$build_dir" "$docs_dir"
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
validate_and_create_directory() {
  local dir_path="$1"
  local dir_purpose="$2"

  if [ -d "$dir_path" ]; then
    echo "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir_purpose —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $dir_path"
  else
    echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir_purpose –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $dir_path"
    read -p "–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é? (Y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Nn]$ ]]; then
      mkdir -p "$dir_path"
      echo "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: $dir_path"
    fi
  fi
}
```

## üîß –£–¢–ò–õ–ò–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ò–†–ï–ö–¢–û–†–ò–Ø–ú–ò

### –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É
```bash
# –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞
project_navigation() {
  local command="$1"
  local project_root=$(find_project_root "$(pwd)")

  if [ -z "$project_root" ]; then
    echo "‚ùå –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    return 1
  fi

  case "$command" in
    "root"|"r")
      cd "$project_root"
      echo "üìÅ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: $(pwd)"
      ;;
    "src"|"s")
      cd "$project_root/src" 2>/dev/null || cd "$project_root"
      echo "üìÅ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞: $(pwd)"
      ;;
    "test"|"t")
      cd "$project_root/test" 2>/dev/null || cd "$project_root/tests" 2>/dev/null || cd "$project_root"
      echo "üìÅ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤: $(pwd)"
      ;;
    "docs"|"d")
      cd "$project_root/docs" 2>/dev/null || cd "$project_root"
      echo "üìÅ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: $(pwd)"
      ;;
    "build"|"b")
      cd "$project_root/build" 2>/dev/null || cd "$project_root/dist" 2>/dev/null || cd "$project_root"
      echo "üìÅ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–±–æ—Ä–∫–∏: $(pwd)"
      ;;
    *)
      echo "üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
      echo "   root|r  - –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞"
      echo "   src|s   - –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥"
      echo "   test|t  - —Ç–µ—Å—Ç—ã"
      echo "   docs|d  - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
      echo "   build|b - —Å–±–æ—Ä–∫–∞"
      ;;
  esac
}

# –ê–ª–∏–∞—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
alias proot='project_navigation root'
alias psrc='project_navigation src'
alias ptest='project_navigation test'
alias pdocs='project_navigation docs'
alias pbuild='project_navigation build'
```

### –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—É—Ç–µ–π
```bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø—É—Ç–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ
check_project_path_integrity() {
  local project_root="$1"

  echo "üîç –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –ü–£–¢–ï–ô –ü–†–û–ï–ö–¢–ê"
  echo "===================================="

  cd "$project_root" || return 1

  # –ü–æ–∏—Å–∫ –±–∏—Ç—ã—Ö —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
  echo "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫:"
  local broken_links=$(find . -type l ! -exec test -e {} \; -print 2>/dev/null)
  if [ -n "$broken_links" ]; then
    echo "‚ùå –ë–∏—Ç—ã–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏:"
    echo "$broken_links"
  else
    echo "‚úÖ –í—Å–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
  fi

  # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
  echo "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤:"
  local problematic_files=$(find . -name "* *" -o -name "*\t*" -o -name "*\n*" 2>/dev/null)
  if [ -n "$problematic_files" ]; then
    echo "‚ö†Ô∏è –§–∞–π–ª—ã —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ (–ø—Ä–æ–±–µ–ª—ã, —Ç–∞–±—ã):"
    echo "$problematic_files"
  else
    echo "‚úÖ –í—Å–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  echo "üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:"
  local unreadable_files=$(find . ! -readable -type f 2>/dev/null | head -10)
  if [ -n "$unreadable_files" ]; then
    echo "‚ùå –ù–µ—á–∏—Ç–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã:"
    echo "$unreadable_files"
  else
    echo "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —á—Ç–µ–Ω–∏—è"
  fi
}
```

## üìä –û–¢–ß–ï–¢–´ –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê

### –û—Ç—á–µ—Ç –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
```bash
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
generate_directory_report() {
  local project_root="$1"
  local output_file="${2:-directory_report.md}"

  echo "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"

  cat > "$output_file" << EOF
# –û—Ç—á–µ—Ç –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è**: $(date)
**–ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞**: $project_root

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

\`\`\`
$(tree -L 3 "$project_root" 2>/dev/null || find "$project_root" -type d | head -20)
\`\`\`

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

EOF

  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
  echo "### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤" >> "$output_file"
  echo "" >> "$output_file"
  find "$project_root" -type f | sed 's/.*\.//' | sort | uniq -c | sort -nr | head -10 | while read count ext; do
    echo "- **.$ext**: $count —Ñ–∞–π–ª–æ–≤" >> "$output_file"
  done

  # –†–∞–∑–º–µ—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  echo "" >> "$output_file"
  echo "### –†–∞–∑–º–µ—Ä—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π" >> "$output_file"
  echo "" >> "$output_file"
  du -sh "$project_root"/* 2>/dev/null | sort -hr | head -10 | while read size dir; do
    echo "- **$(basename "$dir")**: $size" >> "$output_file"
  done

  echo "‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $output_file"
}
```

## üö® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø –ò –û–®–ò–ë–ö–ò

### –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
```bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏
check_directory_issues() {
  local project_root="$1"

  echo "‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–• –ü–†–û–ë–õ–ï–ú"
  echo "================================="

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª—É–±–∏–Ω—ã –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
  local max_depth=$(find "$project_root" -type d -exec sh -c 'echo "${1//[^\/]}" | wc -c' _ {} \; | sort -n | tail -1)
  if [ "$max_depth" -gt 10 ]; then
    echo "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –≥–ª—É–±–æ–∫–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: $max_depth —É—Ä–æ–≤–Ω–µ–π"
    echo "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–ø—Ä–æ—Å—Ç–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
  find "$project_root" -type d -exec sh -c 'count=$(ls -1 "$1" 2>/dev/null | wc -l); if [ $count -gt 100 ]; then echo "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ $1: $count"; fi' _ {} \;

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–º–µ–Ω
  local duplicate_names=$(find "$project_root" -type f -exec basename {} \; | sort | uniq -d)
  if [ -n "$duplicate_names" ]; then
    echo "‚ö†Ô∏è –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤:"
    echo "$duplicate_names"
  fi
}
```

–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö Memory Bank, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –æ—à–∏–±–∫–∏ –∏ —É–ª—É—á—à–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –ø—Ä–æ–µ–∫—Ç—É.