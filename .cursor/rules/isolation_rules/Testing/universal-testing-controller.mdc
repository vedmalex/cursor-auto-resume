---
description: "Apply this rule when executing testing operations to use universal testing controller that detects languages, selects appropriate adapters, and executes testing rules across JavaScript, Python, Java, C#, Go, Rust, and Zig with language-agnostic approach."
globs: universal-testing-controller.mdc, **/universal-test-*.mdc
alwaysApply: false
---

# UNIVERSAL TESTING CONTROLLER

> **TL;DR:** Central controller for language-agnostic testing. Detects languages, selects adapters, executes Rules #8-16 across JavaScript, Python, Java, C#, Go, Rust, and Zig.

## üéØ ARCHITECTURE OVERVIEW

```yaml
universal_testing_system:
  controller: "UniversalTestingController"
  adapters: ["JavaScript", "TypeScript", "Python", "Java", "C#", "Go", "Rust", "Zig"]
  rules: ["#8-16 Universal Testing Principles"]
  performance: "< 200ms detection, < 30s execution"
```

## üîç LANGUAGE DETECTION ALGORITHM

```typescript
interface LanguageDetectionResult {
  language: string;
  confidence: number;
  frameworks: string[];
  indicators: DetectionIndicator[];
}

interface DetectionIndicator {
  type: 'file' | 'dependency' | 'config' | 'pattern';
  value: string;
  weight: number;
}

class UniversalLanguageDetector {
  private readonly detectionRules = new Map<string, DetectionRule[]>();

  constructor() {
    this.initializeDetectionRules();
  }

  detect(projectPath: string): LanguageDetectionResult[] {
    const indicators = this.scanProject(projectPath);
    const scores = this.calculateLanguageScores(indicators);

    return scores
      .filter(score => score.confidence > 0.7)
      .sort((a, b) => b.confidence - a.confidence);
  }

  private initializeDetectionRules() {
    // JavaScript Detection
    this.detectionRules.set('javascript', [
      { pattern: '*.js', weight: 0.9, type: 'file' },
      { pattern: 'package.json', weight: 0.8, type: 'config' },
      { pattern: 'node_modules/', weight: 0.7, type: 'directory' },
      { pattern: 'jest.config.js', weight: 0.8, type: 'config' },
      { pattern: 'vitest.config.js', weight: 0.8, type: 'config' }
    ]);

    // TypeScript Detection
    this.detectionRules.set('typescript', [
      { pattern: '*.ts', weight: 0.9, type: 'file' },
      { pattern: '*.tsx', weight: 0.9, type: 'file' },
      { pattern: 'tsconfig.json', weight: 0.9, type: 'config' },
      { pattern: 'package.json', weight: 0.8, type: 'config' },
      { pattern: '@types/*', weight: 0.7, type: 'dependency' },
      { pattern: 'jest.config.ts', weight: 0.8, type: 'config' },
      { pattern: 'vitest.config.ts', weight: 0.8, type: 'config' }
    ]);

    // Python Detection
    this.detectionRules.set('python', [
      { pattern: '*.py', weight: 0.9, type: 'file' },
      { pattern: 'requirements.txt', weight: 0.8, type: 'config' },
      { pattern: 'pyproject.toml', weight: 0.9, type: 'config' },
      { pattern: 'pytest.ini', weight: 0.8, type: 'config' },
      { pattern: 'setup.py', weight: 0.7, type: 'config' }
    ]);

    // Java Detection
    this.detectionRules.set('java', [
      { pattern: '*.java', weight: 0.9, type: 'file' },
      { pattern: 'pom.xml', weight: 0.9, type: 'config' },
      { pattern: 'build.gradle', weight: 0.9, type: 'config' },
      { pattern: 'src/main/java/', weight: 0.8, type: 'directory' },
      { pattern: 'src/test/java/', weight: 0.8, type: 'directory' }
    ]);

    // C# Detection
    this.detectionRules.set('csharp', [
      { pattern: '*.cs', weight: 0.9, type: 'file' },
      { pattern: '*.csproj', weight: 0.9, type: 'config' },
      { pattern: '*.sln', weight: 0.8, type: 'config' },
      { pattern: 'packages.config', weight: 0.7, type: 'config' }
    ]);

    // Go Detection
    this.detectionRules.set('go', [
      { pattern: '*.go', weight: 0.9, type: 'file' },
      { pattern: 'go.mod', weight: 0.9, type: 'config' },
      { pattern: 'go.sum', weight: 0.8, type: 'config' },
      { pattern: '*_test.go', weight: 0.8, type: 'file' }
    ]);

    // Rust Detection
    this.detectionRules.set('rust', [
      { pattern: '*.rs', weight: 0.9, type: 'file' },
      { pattern: 'Cargo.toml', weight: 0.9, type: 'config' },
      { pattern: 'Cargo.lock', weight: 0.8, type: 'config' },
      { pattern: 'src/lib.rs', weight: 0.8, type: 'file' },
      { pattern: 'src/main.rs', weight: 0.8, type: 'file' }
    ]);

    // Zig Detection
    this.detectionRules.set('zig', [
      { pattern: '*.zig', weight: 0.9, type: 'file' },
      { pattern: 'build.zig', weight: 0.9, type: 'config' },
      { pattern: 'build.zig.zon', weight: 0.8, type: 'config' },
      { pattern: 'src/main.zig', weight: 0.8, type: 'file' }
    ]);
  }
}
```

## üè≠ ADAPTER FACTORY PATTERN

```typescript
interface LanguageAdapter {
  detectFrameworks(projectPath: string): TestingFramework[];
  executeRule(rule: UniversalRule, context: TestContext): Promise<RuleResult>;
  getPerformanceTargets(): PerformanceTargets;
  validateConfiguration(config: TestConfiguration): ValidationResult;
}

class UniversalTestingController {
  private readonly detector = new UniversalLanguageDetector();
  private readonly adapters = new Map<string, () => LanguageAdapter>();
  private readonly ruleExecutor = new UniversalRuleExecutor();

  constructor() {
    this.registerAdapters();
  }

  private registerAdapters() {
    this.adapters.set('javascript', () => new JavaScriptAdapter());
    this.adapters.set('typescript', () => new TypeScriptAdapter());
    this.adapters.set('python', () => new PythonAdapter());
    this.adapters.set('java', () => new JavaAdapter());
    this.adapters.set('csharp', () => new CSharpAdapter());
    this.adapters.set('go', () => new GoAdapter());
    this.adapters.set('rust', () => new RustAdapter());
    this.adapters.set('zig', () => new ZigAdapter());
  }

  async executeUniversalTesting(projectPath: string): Promise<UniversalTestResult> {
    const detectionResults = this.detector.detect(projectPath);
    const results: LanguageTestResult[] = [];

    for (const detection of detectionResults) {
      const adapter = this.createAdapter(detection.language);
      const frameworks = adapter.detectFrameworks(projectPath);

      const languageResult = await this.executeLanguageTests(
        adapter,
        detection,
        frameworks,
        projectPath
      );

      results.push(languageResult);
    }

    return this.aggregateResults(results);
  }

  private async executeLanguageTests(
    adapter: LanguageAdapter,
    detection: LanguageDetectionResult,
    frameworks: TestingFramework[],
    projectPath: string
  ): Promise<LanguageTestResult> {
    const context = new TestContext(projectPath, detection, frameworks);
    const ruleResults: RuleResult[] = [];

    // Execute all Universal Rules #8-16
    for (const rule of UniversalRules.ALL) {
      const result = await adapter.executeRule(rule, context);
      ruleResults.push(result);
    }

    return {
      language: detection.language,
      confidence: detection.confidence,
      frameworks,
      ruleResults,
      performance: this.measurePerformance(ruleResults)
    };
  }
}
```

## üéØ UNIVERSAL RULE EXECUTOR

```typescript
enum UniversalRuleType {
  GRANULAR_TESTS = 8,
  TEST_ISOLATION = 9,
  FEATURE_TESTING = 10,
  COVERAGE = 11,
  EDGE_CASES = 12,
  PERFORMANCE = 13,
  TIMING = 14,
  SECURE_ID = 15,
  CONCURRENCY = 16
}

class UniversalRuleExecutor {
  async executeRule(
    rule: UniversalRuleType,
    adapter: LanguageAdapter,
    context: TestContext
  ): Promise<RuleResult> {
    const startTime = performance.now();

    try {
      const result = await adapter.executeRule(rule, context);
      const endTime = performance.now();

      return {
        rule,
        status: result.success ? 'PASSED' : 'FAILED',
        details: result.details,
        executionTime: endTime - startTime,
        metrics: result.metrics
      };
    } catch (error) {
      return {
        rule,
        status: 'ERROR',
        details: error.message,
        executionTime: performance.now() - startTime,
        error
      };
    }
  }
}
```

## üìä CONFIGURATION MANAGEMENT

```yaml
# universal-testing-config.yml
universal_testing:
  languages:
    javascript:
      primary_runner: "vitest"
      fallback_runners: ["jest", "bun"]
      performance_targets:
        test_execution: "5s/100tests"
        detection: "50ms"

    python:
      primary_runner: "pytest"
      fallback_runners: ["unittest", "nose2"]
      performance_targets:
        test_execution: "8s/100tests"
        detection: "60ms"

    java:
      primary_runner: "junit5"
      fallback_runners: ["testng"]
      performance_targets:
        test_execution: "12s/100tests"
        detection: "80ms"

    csharp:
      primary_runner: "xunit"
      fallback_runners: ["nunit", "mstest"]
      performance_targets:
        test_execution: "10s/100tests"
        detection: "70ms"

    go:
      primary_runner: "testing"
      fallback_runners: ["ginkgo", "testify"]
      performance_targets:
        test_execution: "6s/100tests"
        detection: "40ms"

    rust:
      primary_runner: "builtin"
      fallback_runners: ["criterion"]
      performance_targets:
        test_execution: "10s/100tests"
        detection: "100ms"

    zig:
      primary_runner: "builtin"
      fallback_runners: ["zbench"]
      performance_targets:
        test_execution: "8s/100tests"
        detection: "80ms"

  rules:
    granular_tests:
      enabled: true
      weight: 1.0
      thresholds: { min_assertions: 1, max_complexity: 10 }

    test_isolation:
      enabled: true
      weight: 1.0
      thresholds: { cleanup_required: true, state_independence: true }

    feature_testing:
      enabled: true
      weight: 0.9
      thresholds: { unit_coverage: 80, integration_coverage: 60 }

    coverage:
      enabled: true
      weight: 1.0
      thresholds: { lines: 85, branches: 80, functions: 90 }

    edge_cases:
      enabled: true
      weight: 0.8
      thresholds: { boundary_tests: 5, null_checks: true }

    performance:
      enabled: true
      weight: 0.7
      thresholds: { max_execution_time: "30s", memory_limit: "100MB" }

    timing:
      enabled: true
      weight: 0.6
      thresholds: { precision: "microseconds", statistical_analysis: true }

    secure_id:
      enabled: true
      weight: 0.8
      thresholds: { entropy_bits: 128, uniqueness_tests: 10000 }

    concurrency:
      enabled: true
      weight: 0.9
      thresholds: { thread_safety: true, race_condition_detection: true }

performance_metrics:
  language_detection: "< 200ms average"
  rule_execution: "< 30s for all rules"
  memory_usage: "< 100MB peak"
  accuracy: "> 95% language detection"

quality_metrics:
  rule_coverage: "100% (Rules #8-16)"
  language_support: "7 languages"
  framework_support: "18+ frameworks"
  backward_compatibility: "100% with existing tests"
```

## üöÄ USAGE EXAMPLES

### Multi-Language Project Detection
```typescript
const controller = new UniversalTestingController();
const results = await controller.executeUniversalTesting('./mixed-project');

console.log(`Detected ${results.languages.length} languages:`);
results.languages.forEach(lang => {
  console.log(`- ${lang.language}: ${lang.confidence}% confidence`);
  console.log(`  Frameworks: ${lang.frameworks.join(', ')}`);
  console.log(`  Rules Passed: ${lang.passedRules}/${lang.totalRules}`);
});
```

### Single Language Focused Testing
```typescript
const zigResults = await controller.executeLanguageSpecificTesting('./zig-project', 'zig');

console.log('Zig Testing Results:');
console.log(`- Framework: ${zigResults.primaryFramework}`);
console.log(`- Rules Coverage: ${zigResults.rulesCoverage}%`);
console.log(`- Performance: ${zigResults.executionTime}ms`);
```

### Configuration Override
```typescript
const customConfig = {
  zig: {
    primary_runner: "zbench",
    performance_targets: {
      test_execution: "5s/100tests",
      detection: "60ms"
    }
  }
};

const controller = new UniversalTestingController(customConfig);
```

## üìà PERFORMANCE TARGETS

```yaml
detection_performance:
  javascript: "< 50ms"
  python: "< 60ms"
  java: "< 80ms"
  csharp: "< 70ms"
  go: "< 40ms"
  rust: "< 100ms"
  zig: "< 80ms"

execution_performance:
  javascript: "< 5s/100tests"
  python: "< 8s/100tests"
  java: "< 12s/100tests"
  csharp: "< 10s/100tests"
  go: "< 6s/100tests"
  rust: "< 10s/100tests"
  zig: "< 8s/100tests"

accuracy_targets:
  language_detection: "> 95%"
  framework_detection: "> 90%"
  rule_execution: "> 98%"
```

## üîß INTEGRATION POINTS

### Memory Bank Integration
```typescript
interface MemoryBankIntegration {
  saveTestResults(results: UniversalTestResult): Promise<void>;
  loadTestHistory(projectPath: string): Promise<TestHistory>;
  updateRuleConfiguration(rules: RuleConfiguration): Promise<void>;
}

class MemoryBankTestingIntegration implements MemoryBankIntegration {
  async saveTestResults(results: UniversalTestResult): Promise<void> {
    const reportPath = `memory-bank/reports/testing/${results.timestamp}.json`;
    await fs.writeFile(reportPath, JSON.stringify(results, null, 2));
  }

  async loadTestHistory(projectPath: string): Promise<TestHistory> {
    const historyPattern = `memory-bank/reports/testing/**/project-${hash(projectPath)}.json`;
    const historyFiles = await glob(historyPattern);
    return this.aggregateHistory(historyFiles);
  }
}
```

---
**Status:** ‚úÖ COMPLETE - Universal Testing Controller with 7 Languages
**Languages:** JavaScript, TypeScript, Python, Java, C#, Go, Rust, Zig
**Performance:** < 200ms detection, < 30s execution, > 95% accuracy
