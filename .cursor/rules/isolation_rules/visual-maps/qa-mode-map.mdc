---
description: "Apply this rule when entering QA mode to provide comprehensive validation at any stage of development. Automatically detects current phase, validates Memory Bank consistency, and performs phase-specific technical validation with advanced test failure pattern analysis."
globs: qa-mode-map.mdc, CustomWorkflow/testing/*.mdc, **/active-task-manager.mdc
alwaysApply: false
---


> **TL;DR:** This enhanced QA mode provides comprehensive validation at any stage of development. It automatically detects the current phase, validates Memory Bank consistency, verifies task tracking, and performs phase-specific technical validation to ensure project quality throughout the development lifecycle.

## üß™ ADVANCED TEST ANALYSIS

The QA mode now includes comprehensive **Test Failure Pattern Analysis** that activates during IMPLEMENT phase validation:

### **Enhanced Testing Workflow**:
- **Test Failure Pattern Analysis**: Systematic analysis of test failures to identify recurring patterns
- **Test Organization**: Structured approach to test suite organization and maintenance
- **Edge Case Analysis**: Comprehensive analysis of edge cases and boundary conditions
- **Large Test Analysis**: Specialized analysis for complex test suites
- **Performance Testing**: Integrated performance validation
- **Pattern-Based Solutions**: Automated suggestions based on identified failure patterns

This integration ensures that test failures are not just reported, but analyzed for patterns that can inform better testing strategies and code quality improvements.

### Advanced Test Analysis Rules Loading

–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–±–æ–µ–≤:

`fetch_rules(["./cursor/rules/isolation_rules/CustomWorkflow/testing/test-failure-patterns.mdc"])`

–î–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–∫–∂–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:

1. `fetch_rules(["./cursor/rules/isolation_rules/CustomWorkflow/testing/test-organization.mdc"])`
2. `fetch_rules(["./cursor/rules/isolation_rules/CustomWorkflow/testing/edge-cases.mdc"])`
3. `fetch_rules(["./cursor/rules/isolation_rules/CustomWorkflow/testing/large-test-analysis.mdc"])`
4. `fetch_rules(["./cursor/rules/isolation_rules/CustomWorkflow/testing/performance-testing.mdc"])`

## üîç ENHANCED QA MODE PROCESS FLOW

```mermaid
graph TD
    Start["üöÄ START QA MODE"] --> DetectPhase["üß≠ PHASE DETECTION<br>Determine current project phase"]

    %% Phase detection decision path
    DetectPhase --> PhaseDetermination{"Current Phase?"}
    PhaseDetermination -->|"VAN"| VANChecks["VAN Phase Validation"]
    PhaseDetermination -->|"PLAN"| PLANChecks["PLAN Phase Validation"]
    PhaseDetermination -->|"CREATIVE"| CREATIVEChecks["CREATIVE Phase Validation"]
    PhaseDetermination -->|"IMPLEMENT"| IMPLEMENTChecks["IMPLEMENT Phase Validation"]

    %% Universal checks that apply to all phases
    DetectPhase --> UniversalChecks["üîç UNIVERSAL VALIDATION"]
    UniversalChecks --> MemoryBankCheck["1Ô∏è‚É£ MEMORY BANK VERIFICATION<br>Check consistency & updates"]
    MemoryBankCheck --> TaskTrackingCheck["2Ô∏è‚É£ TASK TRACKING VERIFICATION<br>Validate _task.md as source of truth"]
    TaskTrackingCheck --> ReferenceCheck["3Ô∏è‚É£ REFERENCE VALIDATION<br>Verify cross-references between docs"]

    %% Phase-specific validations feed into comprehensive report
    VANChecks & PLANChecks & CREATIVEChecks & IMPLEMENTChecks --> PhaseSpecificResults["Phase-Specific Results"]
    TestAnalysis["üîç <b>Analyze Test Results & Patterns</b><br>fetch_rules(./cursor/rules/isolation_rules/CustomWorkflow/testing/test-failure-patterns.mdc)"]
    PhaseSpecificResults --> TestAnalysis
    TestAnalysis & ReferenceCheck --> ValidationResults{"‚úÖ All Checks<br>Passed?"}

    %% Results Processing
    ValidationResults -->|"Yes"| SuccessReport["üìù GENERATE SUCCESS REPORT<br>All validations passed"]
    ValidationResults -->|"No"| FailureReport["‚ö†Ô∏è GENERATE FAILURE REPORT<br>With specific fix instructions"]

    %% Success Path
    SuccessReport --> UpdateMB["üìö Update Memory Bank<br>Record successful validation"]
    UpdateMB --> ContinueProcess["üö¶ CONTINUE: Phase processes<br>can proceed"]

    %% Failure Path
    FailureReport --> IdentifyFixes["üîß IDENTIFY REQUIRED FIXES"]
    IdentifyFixes --> ApplyFixes["üõ†Ô∏è APPLY FIXES"]
    ApplyFixes --> Revalidate["üîÑ Re-run validation"]
    Revalidate --> ValidationResults

    %% Style nodes for clarity
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style DetectPhase fill:#f6ad55,stroke:#c27022,color:white
    style UniversalChecks fill:#f6546a,stroke:#c30052,color:white
    style MemoryBankCheck fill:#10b981,stroke:#059669,color:white
    style TaskTrackingCheck fill:#10b981,stroke:#059669,color:white
    style ReferenceCheck fill:#10b981,stroke:#059669,color:white
    style ValidationResults fill:#f6546a,stroke:#c30052,color:white
    style SuccessReport fill:#10b981,stroke:#059669,color:white
    style FailureReport fill:#f6ad55,stroke:#c27022,color:white
    style ContinueProcess fill:#10b981,stroke:#059669,color:white,stroke-width:2px
    style IdentifyFixes fill:#f6ad55,stroke:#c27022,color:white
```

## üß≠ PHASE DETECTION PROCESS

The enhanced QA mode first determines which phase the project is currently in:

```mermaid
graph TD
    PD["Phase Detection"] --> GetActiveTask["Get Active Task Path<br>Using get_active_task_path()"]
    GetActiveTask --> CheckActiveContext["Check _context.md in active task<br>directory for current phase"]
    CheckActiveContext --> CheckTaskFile["Check _task.md in active task<br>directory for task status"]

    CheckTaskFile --> PhaseResult{"Determine<br>Current Phase"}
    PhaseResult -->|"VAN"| VAN["VAN Phase<br>Initialization"]
    PhaseResult -->|"PLAN"| PLAN["PLAN Phase<br>Task Planning"]
    PhaseResult -->|"CREATIVE"| CREATIVE["CREATIVE Phase<br>Design Decisions"]
    PhaseResult -->|"IMPLEMENT"| IMPLEMENT["IMPLEMENT Phase<br>Implementation"]

    VAN & PLAN & CREATIVE & IMPLEMENT --> LoadChecks["Load Phase-Specific<br>Validation Checks"]

    style PD fill:#4da6ff,stroke:#0066cc,color:white
    style PhaseResult fill:#f6546a,stroke:#c30052,color:white
    style LoadChecks fill:#10b981,stroke:#059669,color:white
```

## üìù UNIVERSAL MEMORY BANK VERIFICATION

This process ensures Memory Bank files are consistent and up-to-date regardless of phase:

```mermaid
graph TD
    MBVS["Memory Bank<br>Verification"] --> CoreCheck["Check Core Files Exist"]
    CoreCheck --> CoreFiles["Verify Required Files:<br>projectbrief.md<br>_task.md<br>_context.md"]

    CoreFiles --> ContentCheck["Verify Content<br>Consistency"]
    ContentCheck --> LastModified["Check Last Modified<br>Timestamps"]
    LastModified --> CrossRef["Validate Cross-<br>References"]

    CrossRef --> ConsistencyCheck{"All Files<br>Consistent?"}
    ConsistencyCheck -->|"Yes"| PassMB["‚úÖ Memory Bank<br>Verification Passed"]
    ConsistencyCheck -->|"No"| FailMB["‚ùå Memory Bank<br>Inconsistencies Found"]

    FailMB --> FixSuggestions["Generate Fix<br>Suggestions"]

    style MBVS fill:#4da6ff,stroke:#0066cc,color:white
    style ConsistencyCheck fill:#f6546a,stroke:#c30052,color:white
    style PassMB fill:#10b981,stroke:#059669,color:white
    style FailMB fill:#ff5555,stroke:#dd3333,color:white
```

## üìã TASK TRACKING VERIFICATION

This process validates _task.md as the single source of truth:

```mermaid
graph TD
    TTV["Task Tracking<br>Verification"] --> CheckTasksFile["Check _task.md<br>Existence & Format"]
    CheckTasksFile --> VerifyReferences["Verify Task References<br>in Other Documents"]
    VerifyReferences --> StatusCheck["Verify Task Status<br>Accuracy"]

    StatusCheck --> TaskConsistency{"Tasks Properly<br>Tracked?"}
    TaskConsistency -->|"Yes"| PassTasks["‚úÖ Task Tracking<br>Verification Passed"]
    TaskConsistency -->|"No"| FailTasks["‚ùå Task Tracking<br>Issues Found"]

    FailTasks --> TaskFixSuggestions["Generate Task Tracking<br>Fix Suggestions"]

    style TTV fill:#4da6ff,stroke:#0066cc,color:white
    style TaskConsistency fill:#f6546a,stroke:#c30052,color:white
    style PassTasks fill:#10b981,stroke:#059669,color:white
    style FailTasks fill:#ff5555,stroke:#dd3333,color:white
```

## üîÑ REFERENCE VALIDATION PROCESS

This process ensures proper cross-referencing between documents:

```mermaid
graph TD
    RV["Reference<br>Validation"] --> FindRefs["Find Cross-References<br>in Documents"]
    FindRefs --> VerifyRefs["Verify Reference<br>Accuracy"]
    VerifyRefs --> CheckBackRefs["Check Bidirectional<br>References"]

    CheckBackRefs --> RefConsistency{"References<br>Consistent?"}
    RefConsistency -->|"Yes"| PassRefs["‚úÖ Reference Validation<br>Passed"]
    RefConsistency -->|"No"| FailRefs["‚ùå Reference<br>Issues Found"]

    FailRefs --> RefFixSuggestions["Generate Reference<br>Fix Suggestions"]

    style RV fill:#4da6ff,stroke:#0066cc,color:white
    style RefConsistency fill:#f6546a,stroke:#c30052,color:white
    style PassRefs fill:#10b981,stroke:#059669,color:white
    style FailRefs fill:#ff5555,stroke:#dd3333,color:white
```

## üö® PHASE-SPECIFIC VALIDATION PROCESSES

### VAN Phase Validation

```mermaid
graph TD
    VAN["VAN Phase<br>Validation"] --> InitCheck["Check Initialization<br>Completeness"]
    InitCheck --> PlatformCheck["Verify Platform<br>Detection"]
    PlatformCheck --> ComplexityCheck["Validate Complexity<br>Determination"]

    ComplexityCheck --> VANConsistency{"VAN Phase<br>Complete?"}
    VANConsistency -->|"Yes"| PassVAN["‚úÖ VAN Phase<br>Validation Passed"]
    VANConsistency -->|"No"| FailVAN["‚ùå VAN Phase<br>Issues Found"]

    style VAN fill:#4da6ff,stroke:#0066cc,color:white
    style VANConsistency fill:#f6546a,stroke:#c30052,color:white
    style PassVAN fill:#10b981,stroke:#059669,color:white
    style FailVAN fill:#ff5555,stroke:#dd3333,color:white
```

### PLAN Phase Validation

```mermaid
graph TD
    PLAN["PLAN Phase<br>Validation"] --> PlanCheck["Check Planning<br>Documentation"]
    PlanCheck --> TaskBreakdown["Verify Task<br>Breakdown"]
    TaskBreakdown --> ScopeCheck["Validate Scope<br>Definition"]

    ScopeCheck --> PLANConsistency{"PLAN Phase<br>Complete?"}
    PLANConsistency -->|"Yes"| PassPLAN["‚úÖ PLAN Phase<br>Validation Passed"]
    PLANConsistency -->|"No"| FailPLAN["‚ùå PLAN Phase<br>Issues Found"]

    style PLAN fill:#4da6ff,stroke:#0066cc,color:white
    style PLANConsistency fill:#f6546a,stroke:#c30052,color:white
    style PassPLAN fill:#10b981,stroke:#059669,color:white
    style FailPLAN fill:#ff5555,stroke:#dd3333,color:white
```

### CREATIVE Phase Validation

```mermaid
graph TD
    CREATIVE["CREATIVE Phase<br>Validation"] --> DesignCheck["Check Design<br>Documents"]
    DesignCheck --> ArchCheck["Verify Architectural<br>Decisions"]
    ArchCheck --> PatternCheck["Validate Design<br>Patterns"]

    PatternCheck --> CREATIVEConsistency{"CREATIVE Phase<br>Complete?"}
    CREATIVEConsistency -->|"Yes"| PassCREATIVE["‚úÖ CREATIVE Phase<br>Validation Passed"]
    CREATIVEConsistency -->|"No"| FailCREATIVE["‚ùå CREATIVE Phase<br>Issues Found"]

    style CREATIVE fill:#4da6ff,stroke:#0066cc,color:white
    style CREATIVEConsistency fill:#f6546a,stroke:#c30052,color:white
    style PassCREATIVE fill:#10b981,stroke:#059669,color:white
    style FailCREATIVE fill:#ff5555,stroke:#dd3333,color:white
```

### IMPLEMENT Phase Technical Validation

This retains the original QA validation from the previous version:

```mermaid
graph TD
    IMPLEMENT["IMPLEMENT Phase<br>Validation"] --> ReadDesign["Read Design Decisions"]
    ReadDesign --> FourChecks["Four-Point Technical<br>Validation"]

    FourChecks --> DepCheck["1Ô∏è‚É£ Dependency<br>Verification"]
    DepCheck --> ConfigCheck["2Ô∏è‚É£ Configuration<br>Validation"]
    ConfigCheck --> EnvCheck["3Ô∏è‚É£ Environment<br>Validation"]
    EnvCheck --> MinBuildCheck["4Ô∏è‚É£ Minimal Build<br>Test"]
    MinBuildCheck --> ImplementTest["Run Tests<br>fetch_rules(./cursor/rules/bun-core-rules.mdc)<br>fetch_rules(./cursor/rules/bun-features.mdc)"]
    ImplementTest --> TestAnalysis["üîç Analyze Test Results<br>fetch_rules(./cursor/rules/test-failure-patterns.mdc)"]
    TestAnalysis --> TestOrganization["üìã Test Organization<br>fetch_rules(./cursor/rules/test-organization.mdc)"]
    TestOrganization --> EdgeCaseAnalysis["üéØ Edge Case Analysis<br>fetch_rules(./cursor/rules/edge-cases.mdc)"]
    EdgeCaseAnalysis --> LargeTestAnalysis["üìä Large Test Analysis<br>fetch_rules(./cursor/rules/large-test-analysis.mdc)"]
    LargeTestAnalysis --> PerformanceTest["‚ö° Performance Testing<br>fetch_rules(./cursor/rules/performance-testing.mdc)"]
    PerformanceTest --> TestFailurePatterns["üîÑ Pattern Analysis<br>Identify failure patterns & solutions"]
    TestFailurePatterns --> ImplementConsistency{"IMPLEMENT Phase<br>Complete?"}
    ImplementConsistency -->|"Yes"| PassIMPLEMENT["‚úÖ IMPLEMENT Phase<br>Validation Passed"]
    ImplementConsistency -->|"No"| FailIMPLEMENT["‚ùå IMPLEMENT Phase<br>Issues Found"]

    TestAnalysis --> PhaseSpecificResults["Phase-Specific Results"]
    ReferenceCheck & PhaseSpecificResults --> ValidationResults{"‚úÖ All Checks<br>Passed?"}

    %% Results Processing
    ValidationResults -->|"Yes"| SuccessReport["üìù GENERATE SUCCESS REPORT<br>All validations passed"]
    ValidationResults -->|"No"| FailureReport["‚ö†Ô∏è GENERATE FAILURE REPORT<br>With specific fix instructions"]

    %% Success Path
    SuccessReport --> UpdateMB["üìö Update Memory Bank<br>Record successful validation"]
    UpdateMB --> ContinueProcess["üö¶ CONTINUE: Phase processes<br>can proceed"]

    %% Failure Path
    FailureReport --> IdentifyFixes["üîß IDENTIFY REQUIRED FIXES"]
    IdentifyFixes --> ApplyFixes["üõ†Ô∏è APPLY FIXES"]
    ApplyFixes --> Revalidate["üîÑ Re-run validation"]
    Revalidate --> ValidationResults

    %% Style nodes for clarity
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style DetectPhase fill:#f6ad55,stroke:#c27022,color:white
    style UniversalChecks fill:#f6546a,stroke:#c30052,color:white
    style MemoryBankCheck fill:#10b981,stroke:#059669,color:white
    style TaskTrackingCheck fill:#10b981,stroke:#059669,color:white
    style ReferenceCheck fill:#10b981,stroke:#059669,color:white
    style ValidationResults fill:#f6546a,stroke:#c30052,color:white
    style SuccessReport fill:#10b981,stroke:#059669,color:white
    style FailureReport fill:#f6ad55,stroke:#c27022,color:white
    style ContinueProcess fill:#10b981,stroke:#059669,color:white,stroke-width:2px
    style IdentifyFixes fill:#f6ad55,stroke:#c27022,color:white

    %% Test Analysis Styling
    style TestAnalysis fill:#ff8a65,stroke:#e64a19
    style TestOrganization fill:#ff8a65,stroke:#e64a19
    style EdgeCaseAnalysis fill:#ff8a65,stroke:#e64a19
    style LargeTestAnalysis fill:#ff8a65,stroke:#e64a19
    style PerformanceTest fill:#ff8a65,stroke:#e64a19
    style TestFailurePatterns fill:#ff8a65,stroke:#e64a19
```

## üìã UNIVERSAL VALIDATION COMMAND EXECUTION

### Memory Bank Verification Commands:

```bash
# Check Memory Bank file existence and recency
ls -la memory-bank/
find memory-bank/ -type f -mtime -7 | sort

# Check for consistency between files
grep -r "task" memory-bank/
grep -r "requirement" memory-bank/
```

### Task Tracking Verification Commands:

```bash
# Verify tasks.md as source of truth
test -f tasks.md && echo "‚úÖ tasks.md exists" || echo "‚ùå tasks.md missing"

# Check references to tasks in other files
grep -r "Task" --include="*.md" .
grep -r "task" --include="*.md" . | grep -v "tasks.md" | wc -l

# Verify task status consistency
grep -i "completed\|done\|finished" tasks.md
grep -i "in progress\|started" tasks.md
```

### Reference Validation Commands:

```bash
# Find cross-references between files
grep -r "see\|refer\|reference" --include="*.md" .

# Check for broken references
for file in $(grep -l "see\|refer\|reference" --include="*.md" .); do
  for ref in $(grep -o '[a-zA-Z0-9_-]*\.md' $file); do
    test -f $ref || echo "‚ùå Broken reference: $ref in $file"
  done
done
```

## üìã 1Ô∏è‚É£ DEPENDENCY VERIFICATION PROCESS (Original)

This validation point ensures all required packages are correctly installed.

### Command Execution:

```bash
# Check if packages are installed
npm list react react-dom tailwindcss postcss autoprefixer

# Verify package versions match requirements
npm list | grep -E "react|tailwind|postcss"

# Check for peer dependency warnings
npm ls --depth=0
```

### Validation Criteria:
- All required packages must be installed
- Versions must be compatible with requirements
- No critical peer dependency warnings
- Required dev dependencies must be present

### Common Fixes:
- `npm install [missing-package]` - Install missing packages
- `npm install [package]@[version]` - Fix version mismatches
- `npm install --save-dev [dev-dependency]` - Add development dependencies

## üìù 2Ô∏è‚É£ CONFIGURATION VALIDATION PROCESS (Original)

This validation point ensures configuration files are in the correct format for the project.

### Command Execution:

```bash
# Check package.json for module type
grep "\"type\":" package.json

# Verify configuration file extensions match module type
find . -name "*.config.*" | grep -E "\.(js|cjs|mjs)$"

# Test configuration syntax
node -c *.config.js || node -c *.config.cjs || node -c *.config.mjs
```

### Validation Criteria:
- Configuration file extensions must match module type in package.json
- File syntax must be valid
- Configuration must reference installed packages

### Common Fixes:
- Rename `.js` to `.cjs` for CommonJS in ES module projects
- Fix syntax errors in configuration files
- Adjust configuration to reference installed packages

## üåê 3Ô∏è‚É£ ENVIRONMENT VALIDATION PROCESS (Original)

This validation point ensures the development environment is correctly set up.

### Command Execution:

```bash
# Check build tools
npm run --help

# Verify node version compatibility
node -v

# Check for environment variables
printenv | grep -E "NODE_|PATH|HOME"

# Verify access permissions
ls -la .
```

### Validation Criteria:
- Node.js version must be compatible with requirements
- Build commands must be defined in package.json
- Environment must have necessary access permissions
- Required environment variables must be set

### Common Fixes:
- Update Node.js version
- Add missing scripts to package.json
- Fix file permissions with chmod/icacls
- Set required environment variables

## üî• 4Ô∏è‚É£ MINIMAL BUILD TEST PROCESS (Original)

This validation point tests a minimal build to ensure basic functionality works.

### Command Execution:

```bash
# Run a minimal build
npm run build -- --dry-run || npm run dev -- --dry-run

# Test entry point file existence
find src -name "main.*" -o -name "index.*"

# Validate HTML entry point
grep -i "script.*src=" index.html
```

### Validation Criteria:
- Build process must complete without errors
- Entry point files must exist and be correctly referenced
- HTML must reference the correct JavaScript entry point
- Basic rendering must work in a test environment

### Common Fixes:
- Fix entry point references in HTML
- Correct import paths in JavaScript
- Fix build configuration errors
- Update incorrect paths or references

## üß™ 5Ô∏è‚É£ TEST FAILURE ANALYSIS PROCESS

This validation point analyzes test failures using patterns from CustomWorkflow/testing/test-failure-patterns.mdc.

### Command Execution:

```bash
# Run tests and capture output
npm test 2>&1 | tee test-output.log

# Analyze test failure patterns
grep -i "error\|fail\|timeout" test-output.log

# Check for common test issues
grep -E "(ECONNREFUSED|timeout|assertion|undefined)" test-output.log
```

### Validation Criteria:
- All tests must pass or have documented expected failures
- Test failure patterns must be analyzed against known patterns
- Common test issues must be identified and categorized
- Test environment must be properly configured

### Common Fixes:
- Fix test environment configuration
- Update test dependencies
- Resolve timing issues in async tests
- Fix assertion errors based on pattern analysis

## üìä ENHANCED COMPREHENSIVE QA REPORT FORMAT

```
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üîç ENHANCED QA VALIDATION REPORT ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚îÇ                                                                               ‚îÇ
‚îÇ Project: [Project Name]               Date: [Current Date]                    ‚îÇ
‚îÇ Platform: [OS Platform]               Detected Phase: [Current Phase]         ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ UNIVERSAL VALIDATION RESULTS ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ 1Ô∏è‚É£ MEMORY BANK VERIFICATION                                                   ‚îÇ
‚îÇ    ‚úì Core Files: [Status]                                                     ‚îÇ
‚îÇ    ‚úì Content Consistency: [Status]                                            ‚îÇ
‚îÇ    ‚úì Last Modified: [Status]                                                  ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ 2Ô∏è‚É£ TASK TRACKING VERIFICATION                                                 ‚îÇ
‚îÇ    ‚úì tasks.md Status: [Status]                                                ‚îÇ
‚îÇ    ‚úì Task References: [Status]                                                ‚îÇ
‚îÇ    ‚úì Status Consistency: [Status]                                             ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ 3Ô∏è‚É£ REFERENCE VALIDATION                                                       ‚îÇ
‚îÇ    ‚úì Cross-References: [Status]                                               ‚îÇ
‚îÇ    ‚úì Reference Accuracy: [Status]                                             ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ PHASE-SPECIFIC VALIDATION ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ [VAN/PLAN/CREATIVE/IMPLEMENT] PHASE VALIDATION                                ‚îÇ
‚îÇ    ‚úì [Phase-specific check 1]: [Status]                                       ‚îÇ
‚îÇ    ‚úì [Phase-specific check 2]: [Status]                                       ‚îÇ
‚îÇ    ‚úì [Phase-specific check 3]: [Status]                                       ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ [Technical validation section shown only for IMPLEMENT phase]                  ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ OVERALL STATUS ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ ‚úÖ VALIDATION PASSED - Project quality verified for current phase              ‚îÇ
‚îÇ                                                                               ‚îÇ
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
```

## üö´ ENHANCED FAILURE REPORT FORMAT

If validation fails, a detailed failure report is generated:

```
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚ö†Ô∏è QA VALIDATION FAILURES ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚îÇ                                                                                 ‚îÇ
‚îÇ Project: [Project Name]               Date: [Current Date]                      ‚îÇ
‚îÇ Platform: [OS Platform]               Detected Phase: [Current Phase]           ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ FAILED CHECKS ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ ‚ùå MEMORY BANK ISSUES                                                           ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ ‚ùå TASK TRACKING ISSUES                                                         ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ ‚ùå REFERENCE ISSUES                                                             ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ ‚ùå [PHASE]-SPECIFIC ISSUES                                                      ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ REQUIRED FIXES ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ 1. [Specific fix instruction with command]                                      ‚îÇ
‚îÇ 2. [Specific fix instruction with command]                                      ‚îÇ
‚îÇ 3. [Specific fix instruction with command]                                      ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ ‚ö†Ô∏è VALIDATION FAILED - Please resolve issues before proceeding                  ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
```

## üîÑ QA-ANYTIME ACTIVATION PROTOCOL

The enhanced QA mode can be activated at any time in the development process:

```mermaid
graph TD
    Start["User Types: QA"] --> DetectContext["Detect Current Context"]
    DetectContext --> RunQA["Run QA with Context-Aware Checks"]
    RunQA --> GenerateReport["Generate Appropriate QA Report"]
    GenerateReport --> UserResponse["Present Report to User"]

    UserResponse --> FixNeeded{"Fixes<br>Needed?"}
    FixNeeded -->|"Yes"| SuggestFixes["Display Fix Instructions"]
    FixNeeded -->|"No"| ContinueWork["Continue Current Phase Work"]

    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style FixNeeded fill:#f6546a,stroke:#c30052,color:white
    style SuggestFixes fill:#ff5555,stroke:#dd3333,color:white
    style ContinueWork fill:#10b981,stroke:#059669,color:white
```

This enhanced QA mode serves as a "quality guardian" throughout the development process, ensuring documentation is consistently maintained and all phase requirements are met before proceeding to the next phase.