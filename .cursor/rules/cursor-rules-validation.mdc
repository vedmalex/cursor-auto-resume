---
description: Apply this rule when creating, editing, or validating .mdc rule files to ensure proper structure, effective descriptions, and compliance with Cursor rule standards for Memory Bank system.
globs: ["custom_modes/**/*.md", "**/*.mdc"]
alwaysApply: false
---
# Cursor Rules Validation Guidelines

> **TL;DR:** –≠—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è .mdc —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–≤–∏–ª Cursor, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–π –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º Memory Bank —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –ò–ò.

## ‚ö†Ô∏è MANDATORY RULE: FETCH ALL RELEVANT RULES FIRST ‚ö†Ô∏è

**CRITICAL REQUIREMENT**: –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å .mdc —Ñ–∞–π–ª–∞–º–∏ –ø—Ä–∞–≤–∏–ª Cursor –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:

```markdown
The agent will load critical rules and guidelines using the @<filename> syntax.
This includes: @isolation_rules/main-optimized, @agent-instruction-creation-validation, @rule-description-guidelines, and @writing-effective-clinerules.
Additional specific rules will be loaded as needed for rule management.
```

## 1. VALIDATION WORKFLOW FOR CURSOR RULES

```mermaid
graph TD
    Start["üöÄ Cursor Rules Validation Start"] --> LoadRules["üìö Load Validation Rules"]
    LoadRules --> FileCheck{"File exists?"}

    FileCheck -->|"No"| CreateNew["üìù Create New Rule"]
    FileCheck -->|"Yes"| ValidateExisting["üîç Validate Existing Rule"]

    CreateNew --> GatherRequirements["üìã Gather Requirements"]
    ValidateExisting --> ParseFrontmatter["üìÑ Parse Front-Matter"]

    GatherRequirements --> PromptBasicInfo["üí¨ Prompt for Basic Info"]
    ParseFrontmatter --> ValidateFrontmatter["‚úÖ Validate Front-Matter"]

    PromptBasicInfo --> PromptContent["üí¨ Prompt for Content"]
    ValidateFrontmatter --> CheckLoadingAndAliases["üîÑ Check Rule Loading & Aliases"]

    CheckLoadingAndAliases --> ValidateStructure["üèóÔ∏è Validate Structure"]

    ValidateStructure --> ValidateContent["üìù Validate Content"]
    PromptContent --> AssembleRule["‚öôÔ∏è Assemble Rule"]

    AssembleRule --> ValidateNew["‚úÖ Validate New Rule"]
    ValidateContent --> ValidateSuccessCriteria["üéØ Validate Success Criteria"]
    ValidateSuccessCriteria --> ValidateExamples["üìö Validate Examples"]

    ValidateNew --> NewRuleReport["üìä New Rule Report"]
    ValidateExamples --> ValidateMetadata["üè∑Ô∏è Validate Metadata"]

    NewRuleReport --> CheckNewIssues{"Issues found?"}
    ValidateMetadata --> GenerateReport["üìä Generate Validation Report"]

    CheckNewIssues -->|"Yes"| ProvideNewFeedback["üîÑ Provide Feedback"]
    CheckNewIssues -->|"No"| ProposeCreation["üéØ Propose File Creation"]

    GenerateReport --> CheckIssues{"Issues found?"}

    CheckIssues -->|"Yes"| ProvideFeedback["üîÑ Provide Improvement Feedback"]
    CheckIssues -->|"No"| ValidationComplete["‚úÖ Validation Complete"]

    ProvideNewFeedback --> PromptContent
    ProvideFeedback --> ValidateExisting
    ProposeCreation --> End["üèÅ Validation End"]
    ValidationComplete --> End

    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style FileCheck fill:#ffa64d,stroke:#cc7a30,color:white
    style CreateNew fill:#4dbb5f,stroke:#36873f,color:white
    style ValidateExisting fill:#d94dbb,stroke:#a3378a,color:white
    style End fill:#4da6ff,stroke:#0066cc,color:white
    style CheckLoadingAndAliases fill:#8b5fec,stroke:#5c3ca6,color:white
    style ValidateSuccessCriteria fill:#ffcc99,stroke:#ff9900,color:white
```

## 2. FRONT-MATTER VALIDATION CRITERIA

### 2.1. Required Front-Matter Structure
```yaml
---
description: [Clear explanation of what this rule is for]
author: [Your Name/Handle]
version: [1.0]
globs: [Array of file patterns - optional but recommended]
tags: [Array of categorization tags - optional]
---
```

### 2.2. Front-Matter Validation Checklist
- ‚úÖ **Presence**: Front-matter exists at file beginning
- ‚úÖ **Format**: Valid YAML syntax with `---` delimiters
- ‚úÖ **Required Fields**:
  - `description`: MANDATORY - Non-empty, clear, concise, in English, and defines activation conditions
  - `author`: Identification of rule creator
  - `version`: Version number (semantic versioning preferred)
  - `alwaysApply`: MANDATORY - Must be boolean (true/false)
- ‚úÖ **Optional Fields**:
  - `globs`: File patterns for rule relevance
  - `tags`: Categorization for rule management
- ‚úÖ **Data Types**: Correct YAML data types for all fields

## 3. CONTENT STRUCTURE VALIDATION

### 3.0. RULE LOADING OPTIMIZATION AND ALIASING

**CRITICAL REQUIREMENT**: –ê–≥–µ–Ω—Ç –î–û–õ–ñ–ï–ù –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –ø—Ä–∞–≤–∏–ª –∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏—è—Ö —Ä–∞–±–æ—Ç—ã –∏ —É–±–µ–∂–¥–∞—Ç—å—Å—è –≤ —Ç–æ–º, —á—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –ø—Ä–∞–≤–∏–ª–æ/—Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.

**–ü—Ä–∏–Ω—Ü–∏–ø—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:**
- **–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞**: –ü—Ä–∞–≤–∏–ª–æ/—Ñ–∞–π–ª –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
- **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏**: –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ/—Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "–ø–æ–¥–Ω—è—Ç—å –≤–≤–µ—Ä—Ö" –≤ —Å–ø–∏—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏, –∫–∞–∫ –≤–∞–∂–Ω–æ–µ.
- **–ê–ª–∏–∞—Å–∏—Ä–æ–≤–∞–Ω–∏–µ**: –î–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–ª–∏ "–ø–æ–¥–Ω—è—Ç—ã—Ö" –ø—Ä–∞–≤–∏–ª/—Ñ–∞–π–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–ª–∏–∞—Å.
  - **–§–æ—Ä–º–∞—Ç –∞–ª–∏–∞—Å–∞**: –ê–ª–∏–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `CORE_RULES`, `GIT_WORKFLOW_CONTROLLER`).
  - **–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å**: –ê–ª–∏–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤–æ –≤—Å–µ–º —Ñ–∞–π–ª–µ.
  - **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: –í –º–µ—Å—Ç–∞—Ö –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞/—Ñ–∞–π–ª–∞ (–ø–æ –ø–æ–ª–Ω–æ–º—É –ø—É—Ç–∏ `@<filename>`) –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ –ø–æ –µ–≥–æ –∞–ª–∏–∞—Å—É (`@<ALIAS_NAME>`).

**–ü—Ä–æ—Ü–µ—Å—Å:**
```mermaid
graph TD
    StartCheck["üîÑ –ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª"] --> CheckCache{"–ü—Ä–∞–≤–∏–ª–æ —É–∂–µ –≤ –∫—ç—à–µ?"}
    CheckCache -->|"–î–∞"| UseCached["‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ"]
    CheckCache -->|"–ù–µ—Ç"| LoadRule["üìö –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ"]
    LoadRule --> IdentifyUsage{"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑?"}
    IdentifyUsage -->|"–î–∞"| PromoteToAlias["‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å –¥–æ –∞–ª–∏–∞—Å–∞"]
    PromoteToAlias --> CreateAlias["üìù –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–ª–∏–∞—Å"]
    CreateAlias --> UpdateReferences["üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–ª–∏–∞—Å"]
    UpdateReferences --> AddToCache["‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫—ç—à —Å –∞–ª–∏–∞—Å–æ–º"]
    IdentifyUsage -->|"–ù–µ—Ç"| AddToCache["‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫—ç—à"]
    AddToCache --> EndCheck["üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É"]

    style StartCheck fill:#8b5fec,stroke:#5c3ca6,color:white
    style CheckCache fill:#ffa64d,stroke:#cc7a30,color:white
    style UseCached fill:#4dbb5f,stroke:#36873f,color:white
    style LoadRule fill:#d94dbb,stroke:#a3378a,color:white
    style IdentifyUsage fill:#4dbbbb,stroke:#368787,color:white
    style PromoteToAlias fill:#e699d9,stroke:#d94dbb,color:white
    style CreateAlias fill:#d971ff,stroke:#a33bc2,color:white
    style UpdateReferences fill:#ff71c2,stroke:#c23b8a,color:white
    style AddToCache fill:#a0c0f0,stroke:#7090c0,color:black
    style EndCheck fill:#4da6ff,stroke:#0066cc,color:white
```

### 3.1. Mandatory Sections for Cursor Rules

```mermaid
graph TD
    CursorRule["Cursor Rule File"] --> Title["# Rule Title"]
    CursorRule --> Objective["## Objective/Purpose"]
    CursorRule --> Structure["## Structured Content"]

    Structure --> Headings["### Proper Headings"]
    Structure --> Lists["### Lists & Bullets"]
    Structure --> CodeBlocks["### Code Examples"]
    Structure --> Emphasis["### Text Emphasis"]
    Structure --> RuleLoadingAliasValidation["### Rule Loading and Alias Validation"]

    RuleLoadingAliasValidation --> RuleType["## Rule Type Specific Content"]

    RuleType --> Informational["### Informational Rules"]
    RuleType --> Process["### Process/Workflow Rules"]
    RuleType --> Behavioral["### Behavioral/Instructional Rules"]
    RuleType --> Meta["### Meta-Rules"]
    RuleType --> ModeSpecific["### Mode-Specific Rules"]
    RuleType --> MemoryBank["### Memory Bank Rules"]

    CursorRule --> Examples["## Examples & Patterns"]
    CursorRule --> Validation["## Validation Steps"]

    style Title fill:#4da6ff,stroke:#0066cc,color:white
    style Objective fill:#ffa64d,stroke:#cc7a30,color:white
    style Structure fill:#4dbb5f,stroke:#36873f,color:white
    style RuleLoadingAliasValidation fill:#8b5fec,stroke:#5c3ca6,color:white
    style RuleType fill:#d94dbb,stroke:#a3378a,color:white
    style Examples fill:#4dbbbb,stroke:#368787,color:white
    style Validation fill:#bb4d4d,stroke:#873636,color:white
```

### 3.2. Content Validation Criteria

#### Clear Objective
- ‚úÖ **Well-defined purpose** stated at beginning
- ‚úÖ **Reinforced in content** throughout the rule
- ‚úÖ **Specific scope** clearly defined

#### Success Criteria Definition
- ‚úÖ **Step-by-Step Success Criteria**: Each step in any workflow or process MUST have clearly defined and verifiable success criteria
- ‚úÖ **Measurable Outcomes**: Success criteria must be quantifiable or clearly verifiable with specific completion indicators
- ‚úÖ **Clarity and Precision**: Criteria must be unambiguous and leave no room for interpretation
- ‚úÖ **Completeness Coverage**: All aspects of step completion must be addressed in the success criteria
- ‚úÖ **Validation Methods**: Clear methods for verifying criteria fulfillment must be specified
- ‚úÖ **Insufficient Criteria Handling**: When success criteria are not sufficiently precise, the agent MUST ask clarifying questions and propose additional details to make them unambiguous

#### Structured Content
- ‚úÖ **Logical organization** using proper Markdown headings
- ‚úÖ **Effective lists** for steps, criteria, key points
- ‚úÖ **Code blocks** with language specification for syntax highlighting
- ‚úÖ **Proper emphasis** using **bold** and *italics*
- ‚úÖ **Rule Loading and Alias Validation**: All rule and file references MUST use the `@<filename>` syntax or `@<ALIAS_NAME>` syntax. The system will automatically resolve paths and aliases, ensuring existence and proper loading. Aliases MUST follow the specified naming convention and be unique.

#### Clarity and Precision
- ‚úÖ **Unambiguous language** throughout
- ‚úÖ **Jargon explained** or avoided
- ‚úÖ **Precise instructions** for AI behavior guidance

#### Modularity
- ‚úÖ **Single focus** per rule
- ‚úÖ **Manageable scope** for understanding and updates
- ‚úÖ **Clear boundaries** with other rules

### 3.3. Modularity and Size Criteria
- ‚úÖ **Rule Size Recommendation**: For optimal readability and maintainability, it is recommended that the content of a rule (excluding front-matter) does not exceed **200 lines**.
- ‚úÖ **Large Rule Identification**: Rules with content exceeding 200 lines are considered 'large' and should be reviewed for potential refactoring and splitting into multiple, more focused rules.
- ‚úÖ **Splitting Capability Reference**: The process for detecting and splitting multi-rule content is managed by the `Rules Manager Mode` (refer to `@custom_modes/agents/rules-manager-instructions.mdc.md` for details on `Step 2.3.5: Multi-Rule Content Detection and Splitting`).

## 4. DESCRIPTION AND TL;DR QUALITY CHECKS

### 4.1. Description Field Validation
- ‚úÖ **Clarity and Conciseness**: Description is clear, concise, and easy for AI to understand.
- ‚úÖ **Contextual Relevance**: Explicitly states scenarios, modes, file types, or project phases where the rule is applicable.
- ‚úÖ **Actionability**: Provides enough information for AI to make an informed decision about applying the rule.
- ‚úÖ **Language**: Description is written in English.
- ‚úÖ **Presence**: Description is present and not empty.
- ‚úÖ **Specificity**: Clearly defines activation conditions or scope.
- ‚úÖ **Ambiguity**: Avoids ambiguity and uses straightforward language.
- ‚úÖ **Relevance**: Helps AI determine if the rule is relevant to current user query or task context.

### 4.2. TL;DR Section Validation
- ‚úÖ **Presence**: TL;DR section exists directly after front-matter.
- ‚úÖ **Conciseness**: Brief, typically 1-2 sentences.
- ‚úÖ **Core Purpose**: Clearly states what the rule does, why it exists, and its primary impact.
- ‚úÖ **Readability**: Uses simple language, easy to grasp essence of the rule.
- ‚úÖ **Location**: Placed at the very top of the rule's markdown content, usually as a blockquote.

## 5. RULE TYPE SPECIFIC VALIDATION

### 5.1. Informational/Documentation Rules
**Validation Criteria:**
- ‚úÖ **Comprehensive overview** of system/technology
- ‚úÖ **Detailed explanations** of components/concepts
- ‚úÖ **Visual diagrams** (Mermaid.js recommended)
- ‚úÖ **Code snippets** and configuration examples
- ‚úÖ **Key terms definitions**

### 5.2. Process/Workflow Rules
**Validation Criteria:**
- ‚úÖ **Clear start and end points**
- ‚úÖ **Numbered sequential steps**
- ‚úÖ **Decision points** with clear options
- ‚úÖ **Tool specifications** for each step
- ‚úÖ **Input/output expectations**
- ‚úÖ **Dependencies and prerequisites**

### 5.3. Behavioral/Instructional Rules (AI Guidance)
**Validation Criteria:**
- ‚úÖ **Explicit instructions** using imperative verbs (MUST, SHOULD, NEVER)
- ‚úÖ **Critical warnings** with proper formatting (üö®, ‚ö†Ô∏è, ‚úÖ, ‚ùå)
- ‚úÖ **Positive and negative examples**
- ‚úÖ **Triggers and conditions** for rule activation
- ‚úÖ **Verification steps** or thinking blocks
- ‚úÖ **Context management** instructions

### 5.4. Meta-Rules
**Validation Criteria:**
- ‚úÖ **Meta-process triggers** clearly defined
- ‚úÖ **Meta-process steps** detailed
- ‚úÖ **User interaction points** specified

### 5.5. Mode-Specific Rules (Memory Bank System)
**Validation Criteria:**
- ‚úÖ **Mode identification** clearly specified (VAN, PLAN, CREATIVE, IMPLEMENT, REFLECT, ARCHIVE)
- ‚úÖ **Phase transitions** properly defined
- ‚úÖ **Context management** instructions included
- ‚úÖ **Task integration** with `tasks.md` specified
- ‚úÖ **Verification commitments** present

### 5.6. Memory Bank Integration Rules
**Validation Criteria:**
- ‚úÖ **File path standards** compliance (`memory-bank/` structure)
- ‚úÖ **Date format** adherence (YYYY-MM-DD)
- ‚úÖ **Task tracking** integration
- ‚úÖ **Context preservation** mechanisms
- ‚úÖ **Artifact creation** requirements

## 6. LANGUAGE AND FORMATTING VALIDATION

### 6.1. AI Guidance Language Standards
**Directive Language:**
- ‚úÖ **MUST** for absolute requirements
- ‚úÖ **SHOULD** for strong recommendations
- ‚úÖ **MAY** for optional actions
- ‚úÖ **MUST NOT/NEVER** for absolute prohibitions
- ‚úÖ **SHOULD NOT** for strong discouragement

**Critical Information Highlighting:**
- ‚úÖ **Emoji usage** for attention (üö®, ‚ö†Ô∏è, ‚úÖ, ‚ùå)
- ‚úÖ **ALL CAPS** for critical sections
- ‚úÖ **Bold formatting** for important terms
- ‚úÖ **Code blocks** for exact patterns

**Concrete Examples:**
- ‚úÖ **Exact code snippets** provided
- ‚úÖ **Command examples** with parameters
- ‚úÖ **Output format** specifications
- ‚úÖ **Desired vs undesired patterns** clearly distinguished

## 7. CONTENT QUALITY VALIDATION

### 7.1. Best Practices Checklist
- ‚úÖ **Broad to narrow** structure (overview ‚Üí specifics)
- ‚úÖ **Analogies/scenarios** for complex concepts
- ‚úÖ **Terminology definitions** for specific terms
- ‚úÖ **Anticipated questions** addressed proactively
- ‚úÖ **Update considerations** for maintenance

### 7.2. Technical Compliance
- ‚úÖ **File naming** follows kebab-case convention
- ‚úÖ **Reference Syntax**: All internal rule and file references MUST exclusively use the `@<filename>` syntax or `@<ALIAS_NAME>` syntax. Any use of `fetch_rule` or `read_file` syntax is considered invalid and requires transformation.
- ‚úÖ **Path Existence Verification**: The existence of the file or rule referenced by `@<filename>` or `@<ALIAS_NAME>` (or resulting from `fetch_rule`/`read_file` transformation) MUST be verified using the agent's internal file system tools (e.g., `file_search`, `read_file` with error handling for non-existence).
- ‚úÖ **Relative Paths for Rules**: For `.mdc` rule files, the path in `@<filename>` MUST be relative to `_cursor/rules/` and MUST NOT contain `_cursor/rules/`.
- ‚úÖ **Relative Paths for Other Files**: For non-`.mdc` files, the path in `@<filename>` MAY be relative to the project root.
- ‚úÖ **Cross-references** to other rules are accurate
- ‚úÖ **Markdown syntax** is valid and renders correctly
- ‚úÖ **Code examples** are syntactically correct
- ‚úÖ **Links and references** are functional
- ‚úÖ **Alias Validation**: All defined aliases MUST be in uppercase, contain no special characters, and be unique within the entire rule file. All references using aliases MUST correctly point to a defined alias.
- ‚úÖ **Duplicate Loading Prevention**: The rule MUST include mechanisms to detect and prevent the duplicate loading of the same rule or file into the context, promoting frequently used rules to aliases as needed.

## 8. VALIDATION REPORT TEMPLATE

### 8.1. Validation Report Structure
```markdown
# Cursor Rule Validation Report: [filename]

## Executive Summary
- **Rule Type**: [.mdc/.mdc.md/mode-specific/memory-bank]
- **Status**: [PASS/FAIL/NEEDS_IMPROVEMENT]
- **Critical Issues**: [Count]
- **Recommendations**: [Count]
- **Compliance Score**: [X/10]
- **Memory Bank Integration**: [‚úÖ/‚ùå]

## Front-Matter Analysis
- [‚úÖ/‚ùå] YAML syntax valid
- [‚úÖ/‚ùå] Required fields present (`description`, `alwaysApply`)
- [‚úÖ/‚ùå] Description quality adequate
- [‚úÖ/‚ùå] Metadata completeness
- [‚úÖ/‚ùå] Globs patterns valid

## Content Structure Analysis
- [‚úÖ/‚ùå] Proper heading hierarchy
- [‚úÖ/‚ùå] Clear objective statement (TL;DR)
- [‚úÖ/‚ùå] Logical organization
- [‚úÖ/‚ùå] Appropriate rule type structure
- [‚úÖ/‚ùå] Fetch rules requirements included
- [‚úÖ/‚ùå] Rule loading optimization and aliasing implemented and validated

## Memory Bank Integration Analysis
- [‚úÖ/‚ùå] Mode-specific requirements met
- [‚úÖ/‚ùå] Task integration specified
- [‚úÖ/‚ùå] Context management included
- [‚úÖ/‚ùå] Verification commitments present
- [‚úÖ/‚ùå] Artifact creation requirements

## Language and Formatting Analysis
- [‚úÖ/‚ùå] Directive language usage (MUST, SHOULD, WILL)
- [‚úÖ/‚ùå] Critical information highlighting
- [‚úÖ/‚ùå] Example quality and completeness
- [‚úÖ/‚ùå] Technical accuracy
- [‚úÖ/‚ùå] Mermaid diagrams valid

## Recommendations
1. [Specific improvement recommendation]
2. [Another recommendation]
...

## Compliance Matrix
| Criteria | Status | Notes |
|----|-----|----|
| Front-matter | ‚úÖ/‚ùå | Details |
| Structure | ‚úÖ/‚ùå | Details |
| Content | ‚úÖ/‚ùå | Details |
| Examples | ‚úÖ/‚ùå | Details |
| Memory Bank Integration | ‚úÖ/‚ùå | Details |
| Mode Compatibility | ‚úÖ/‚ùå | Details |
| Rule Loading/Aliasing | ‚úÖ/‚ùå | Details |
```

## 9. COMPLEXITY-BASED VALIDATION

### Level 1: Basic Cursor Rule Validation
- Front-matter presence and basic structure
- Clear objective statement
- Basic content organization
- Memory Bank compatibility check
- Basic check for rule loading and alias format

### Level 2: Standard Cursor Rule Validation
- Complete front-matter validation
- Content structure compliance
- Language and formatting standards
- Basic example validation
- Mode integration verification
- Detailed check for rule loading optimization and alias uniqueness

### Level 3: Advanced Cursor Rule Validation
- Comprehensive content analysis
- Cross-reference validation
- Technical accuracy verification
- User experience assessment
- Memory Bank system integration
- In-depth analysis of rule loading patterns and alias effectiveness

### Level 4: Enterprise Cursor Rule Validation
- Full compliance matrix validation
- Integration testing with other rules
- Performance impact assessment
- Documentation completeness audit
- System-wide consistency verification
- Full audit of rule loading, alias usage, and impact on token efficiency

## 10. AUTOMATED VALIDATION SUPPORT

### 10.1. Validation Script Integration
```bash
# Example validation command structure
validate_cursor_rule [filename] --level [1-4] --report [format] --type [mdc|mode|memory-bank]
```

### 10.2. Continuous Validation
- Pre-commit hooks for rule validation
- CI/CD integration for rule repositories
- Automated compliance reporting

## ‚úÖ VERIFICATION COMMITMENT

I WILL ensure all Cursor .mdc rule files comply with the front-matter requirements and structural guidelines defined in this validation rule.
I WILL perform comprehensive validation checks covering front-matter, content structure, **description and TL;DR quality**, language standards, Memory Bank integration, and technical compliance.
I WILL generate detailed validation reports with specific recommendations for improvement and Memory Bank compatibility assessment.
I WILL adapt validation rigor based on the complexity level of the Cursor rule being validated.
I WILL maintain consistency with Memory Bank system standards while ensuring optimal AI behavior guidance.
I WILL validate all cross-references to other rules and ensure technical accuracy of code examples and instructions.
I WILL provide constructive feedback focused on improving rule effectiveness, AI interpretation quality, and Memory Bank system integration.
I WILL ensure all validated rules follow the kebab-case naming convention and proper directory structure within the Memory Bank ecosystem.
I WILL maintain validation documentation and update criteria as Memory Bank system and Cursor standards evolve.
I WILL integrate Cursor rule validation with the Memory Bank task tracking system for comprehensive rule lifecycle management.
I WILL verify mode-specific requirements and ensure proper integration with VAN, PLAN, CREATIVE, IMPLEMENT, REFLECT, and ARCHIVE phases.
I WILL validate context management instructions and task integration specifications for seamless Memory Bank operation.
I WILL ensure that all rules and files are referenced using the new `@<filename>` syntax or `@<ALIAS_NAME>` syntax, and that aliases are correctly defined, unique, and used.
I WILL implement mechanisms to detect and prevent duplicate rule/file loading, promoting frequently used resources to aliases to optimize context and token efficiency.
I WILL ensure that all workflows and processes have clearly defined and verifiable success criteria for each step, asking clarifying questions when criteria are insufficient.
I WILL validate that success criteria are measurable, unambiguous, complete, and include proper validation methods for verifying fulfillment.
